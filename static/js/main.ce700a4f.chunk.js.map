{"version":3,"sources":["Models/IInstruction.ts","Media/processor-icon.svg","Data/AssemblerDirectiveSource.ts","Data/GuideSource.ts","Data/InstructionSource.ts","Data/InstructionTypeSource.ts","Data/RegisterSource.ts","Data/SyscallSource.ts","Components/Guides/GuideDetail.tsx","Components/Guides/GuideListItem.tsx","Components/Guides/GuideList.tsx","Components/AssemblerDirectives/AssemblerDirectiveDetail.tsx","Components/AssemblerDirectives/AssemblerDirectiveListItem.tsx","Components/AssemblerDirectives/AssemblerDirectiveList.tsx","Components/Instructions/InstructionEncoding.tsx","Components/Instructions/InstructionDetail.tsx","Components/Instructions/InstructionListItem.tsx","Components/Instructions/InstructionList.tsx","Components/InstructionTypes/InstructionTypeDetail.tsx","Components/InstructionTypes/InstructionTypeListItem.tsx","Components/InstructionTypes/InstructionTypeList.tsx","Components/Registers/RegisterDetail.tsx","Components/Registers/RegisterListItem.tsx","Components/Registers/RegisterList.tsx","Components/Syscalls/SyscallDetail.tsx","Components/Syscalls/SyscallListItem.tsx","Components/Syscalls/SyscallList.tsx","Data/DataStructure.ts","Components/NavBar.tsx","Components/ReferenceTypeList.tsx","App.tsx","index.tsx"],"names":["instructionCategory","assemblerDirectiveSource","id","name","usage","description","arguments","effect","notes","guideSource","items","type","text","instructionSource","assemblyName","category","MISC","instructionEncoding","equivalentInstructions","result","tags","opcode","rs","rt","rd","shamt","funct","cc","cond","imm","ARITHMETIC","special","BRANCH","regimm","LOGICAL","JUMP","addr","MEMORY","COMPARISON","SHIFT","FLOAT_MOVE_AND_CONVERT","format","ft","fs","fd","FLOAT_ARITHMETIC","FLOAT_CONDITIONAL","fc","FLOAT_MEMORY","SYSTEM","instructionTypeSource","shortName","fields","size","encoding","instructionTypeFromEncoding","enc","find","it","Error","registerSource","numbers","letterNumbers","preserved","syscallSource","inputs","number","outputs","GuideDetail","props","this","item","map","v","itemComponent","className","Card","CardBody","replace","React","GuideListItem","ListGroupItem","ListGroupItemHeading","Badge","color","guide","ListGroupItemText","to","GuideList","ListGroup","flush","AssemblerDirectiveDetail","Row","Col","sm","CardHeader","CardText","AssemblerDirectiveListItem","assemblerDirective","AssemblerDirectiveList","InstructionEncoding","join","tableFormat","bits","headings","lengths","values","Table","scope","i","InstructionDetail","InstructionListItem","instruction","pill","InstructionList","searchFieldRef","searchTextChanged","ev","search","target","value","history","pathname","location","setState","searchText","state","componentWillMount","bind","componentDidMount","window","URLSearchParams","get","current","focus","instructionCategories","Object","keys","k","toLowerCase","trim","split","Form","inline","FormGroup","Label","for","Input","autoComplete","placeholder","onChange","innerRef","length","exactMatches","filter","c","instructions","reduce","a","s","includes","withRouter","InstructionTypeDetail","Math","max","floor","InstructionTypeListItem","instructionType","InstructionTypeList","RegisterDetail","RegisterListItem","register","RegisterList","SyscallDetail","SyscallListItem","syscall","SyscallList","DataStructure","friendlyName","getItemComponent","getListComponent","NavBar","Nav","NavItem","activeClassName","ReferenceTypeList","md","lg","src","process","alt","App","basename","Container","fluid","icon","exact","path","component","render","getCategoryRenderer","structure","match","getItemRenderer","getListRenderer","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ce700a4f.chunk.js","sourcesContent":["export enum instructionCategory {\r\n    MISC = 'miscellaneous',\r\n    ARITHMETIC = \"arithmetic\",\r\n    BRANCH = 'branch',\r\n    JUMP = \"jump\",\r\n    MEMORY = \"memory\",\r\n    LOGICAL = \"logical\",\r\n    COMPARISON = \"comparison\",\r\n    SHIFT = \"shift\",\r\n    FLOAT_MOVE_AND_CONVERT = \"float move and convert\",\r\n    FLOAT_ARITHMETIC = \"float arithmetic\",\r\n    FLOAT_CONDITIONAL = \"float conditional\",\r\n    FLOAT_MEMORY = \"float memory\",\r\n    SYSTEM = \"system\"\r\n}\r\n\r\nexport interface IRTypeEncoding {\r\n    type: 'R-Type',\r\n    opcode: string,\r\n    rs: string,\r\n    rt: string,\r\n    rd: string,\r\n    shamt: string,\r\n    funct: string\r\n}\r\n\r\nexport interface IRITypeEncoding {\r\n    type: 'RI-Type',\r\n    opcode: string,\r\n    rs: string,\r\n    regimm: string,\r\n    imm: string,\r\n}\r\n\r\nexport interface IJTypeEncoding {\r\n    type: 'J-Type',\r\n    opcode: string;\r\n    addr: string;\r\n} \r\n\r\nexport interface IITypeEncoding {\r\n    type: 'I-Type',\r\n    opcode: string,\r\n    rs: string,\r\n    rt: string,\r\n    imm: string,\r\n}\r\n\r\nexport interface ICOPTypeEncoding {\r\n    type: 'COP-Type'\r\n    opcode: string;\r\n    rt: string;\r\n    rd: string;\r\n    funct: string;\r\n    addr: string;\r\n}\r\n\r\nexport interface IFTypeEncoding {\r\n    type: 'F-Type'\r\n    opcode: string;\r\n    format: string;\r\n    ft : string;\r\n    fs: string;\r\n    fd: string;\r\n    funct: string;\r\n}\r\n\r\nexport interface IFCOTypeEncoding {\r\n    type: 'FCO-Type'\r\n    opcode: string;\r\n    format: string;\r\n    cc: string;\r\n    cond: string;\r\n    fs : string;\r\n    fd: string;\r\n    funct: string;\r\n}\r\n\r\nexport interface IFCTTypeEncoding {\r\n    type: 'FCT-Type'\r\n    opcode: string;\r\n    format: string;\r\n    ft: string;\r\n    fs : string;\r\n    cc: string;\r\n    cond: string;\r\n    fc: string;\r\n    funct: string;\r\n}\r\n\r\nexport interface IICTypeEncoding {\r\n    type: 'IC-Type'\r\n    opcode: string;\r\n    format: string;\r\n    cc: string;\r\n    cond: string;\r\n    imm: string;\r\n}\r\n\r\nexport interface IRCTypeEncoding {\r\n    type: 'RC-Type',\r\n    opcode: string,\r\n    rs: string,\r\n    cc: string;\r\n    cond: string;\r\n    rd: string,\r\n    shamt: string,\r\n    funct: string\r\n}\r\n\r\nexport interface ISPECIAL2TypeEncoding {\r\n    type: 'SPECIAL2-Type',\r\n    opcode: string,\r\n    rs: string,\r\n    rt: string;\r\n    rd: string;\r\n    special: string,\r\n    funct: string\r\n}\r\n\r\nexport interface IPseudoEncoding {\r\n    type: 'Pseudo-Instruction',\r\n    equivalentInstructions: string[];\r\n}\r\n\r\nexport type instructionEncoding = IRTypeEncoding | IRITypeEncoding | IJTypeEncoding | IITypeEncoding | ICOPTypeEncoding | IFTypeEncoding | IFCOTypeEncoding | IFCTTypeEncoding | IICTypeEncoding | IRCTypeEncoding | ISPECIAL2TypeEncoding | IPseudoEncoding;\r\n\r\nexport interface IInstruction {\r\n    id: string;\r\n    assemblyName: string;\r\n    name: string;\r\n    description: string;\r\n    usage: string;\r\n    result: string;\r\n    instructionEncoding: instructionEncoding;\r\n    category: instructionCategory;\r\n    notes?: string;\r\n    tags?: string;\r\n}","export default __webpack_public_path__ + \"static/media/processor-icon.53ff0c0c.svg\";","import { IAssemblerDirective } from 'src/Models/IAssemblerDirective';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const assemblerDirectiveSource: IAssemblerDirective[] = [\r\n    {\r\n        id: 'data',\r\n        name: '.data',\r\n        usage: '.data addr',\r\n        description: 'Store subsequent items in the data segment',\r\n        arguments: 'addr (optional):  the address to store subsequent items at',\r\n        effect: 'Subsqeuent items are stored in the data segment.',\r\n        notes: 'By convention, simple MIPS programs begin with a data segment, so this directive is often the first line of a file. Data segments holds items with program-level lifetimes (i.e. they are accessable for the entire life of the program).'\r\n    },\r\n    {\r\n        id: 'text',\r\n        name: '.text',\r\n        usage: '.text addr',\r\n        description: 'Store subsequent items in the text segment',\r\n        arguments: 'addr (optional):  the address to store subsequent items at',\r\n        effect: 'Subsqeuent items are stored in the text segment.',\r\n        notes: 'By convention, simple MIPS programs place a text segment after the data segment, so this directive often comes at the end of the data segment. Text segments hold instructions; more complex code may store other kinds of data within text segments, but this is less common.'\r\n    },\r\n    {\r\n        id: 'kdata',\r\n        name: '.kdata',\r\n        usage: '.kdata addr',\r\n        description: 'Store subsequent items in the kernel data segment',\r\n        arguments: 'addr (optional):  the address to store subsequent items at',\r\n        effect: 'Subsqeuent items are stored in the kernel data segment.'\r\n    },\r\n    {\r\n        id: 'ktext',\r\n        name: '.ktext',\r\n        usage: '.ktext addr',\r\n        description: 'Store subsequent items in the kernel text segment',\r\n        arguments: 'addr (optional):  the address to store subsequent items at',\r\n        effect: 'Subsqeuent items are stored in the kernel text segment.'\r\n    },\r\n    {\r\n        id: 'align',\r\n        name: '.align',\r\n        usage: '.align n',\r\n        description: 'Align the next item to a 2^n byte boundary.',\r\n        arguments: 'n: log2(boundary)',\r\n        effect: 'The next item is aligned to a 2^n byte boundary',\r\n        notes: 'To word align an item (e.g. an array which you will access with lw), use .align 2.'\r\n    },\r\n    {\r\n        id: 'ascii',\r\n        name: '.ascii',\r\n        usage: '.ascii \"str\"',\r\n        description: 'Store an ascii encoded string in memory',\r\n        arguments: 'str: the string to store in memory',\r\n        effect: 'The string is ascii encoded and stored in the current segment.',\r\n        notes: 'Since most functions/syscalls expect null-terminated strings, this directive should be used with caution. Typically, this directive is preceded by a label so the string can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'asciiz',\r\n        name: '.asciiz',\r\n        usage: '.asciiz \"str\"',\r\n        description: 'Store an ascii encoded string in memory (null terminated)',\r\n        arguments: 'str: the string to store in memory',\r\n        effect: 'The string is ascii encoded, null terminated, and stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the string can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'byte',\r\n        name: '.byte',\r\n        usage: '.byte b1, ..., bn',\r\n        description: 'Store n bytes in memory',\r\n        arguments: 'b1, ..., bn: the bytes to store in memory',\r\n        effect: 'The bytes are stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the bytes can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'half',\r\n        name: '.half',\r\n        usage: '.half h1, ..., hn',\r\n        description: 'Store n half-words in memory',\r\n        arguments: 'h1, ..., hn: the half-words to store in memory',\r\n        effect: 'The half-words are stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the half-words can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'word',\r\n        name: '.word',\r\n        usage: '.word w1, ..., wn',\r\n        description: 'Store n words in memory',\r\n        arguments: 'w1, ..., wn: the words to store in memory',\r\n        effect: 'The words are stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the words can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'float',\r\n        name: '.float',\r\n        usage: '.float f1, ..., fn',\r\n        description: 'Store n floats in memory',\r\n        arguments: 'f1, ..., fn: the floats to store in memory',\r\n        effect: 'The floats are stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the floats can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'double',\r\n        name: '.double',\r\n        usage: '.double d1, ..., dn',\r\n        description: 'Store n doubles in memory',\r\n        arguments: 'd1, ..., dn: the doubles to store in memory',\r\n        effect: 'The doubles are stored in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the doubles can be referenced conveniently.'\r\n    },\r\n    {\r\n        id: 'space',\r\n        name: '.space',\r\n        usage: '.space n',\r\n        description: 'Allocates n bytes of space in the current segment',\r\n        arguments: 'n: the number of bytes to allocate in memory',\r\n        effect: 'The bytes are reserved in the current segment.',\r\n        notes: 'Typically, this directive is preceded by a label so the space can be referenced conveniently. The space can be used for any kind of data - it is up to you to keep track of its purpose. For example, .space 40 could be declared for an array of 10 integers, or a 39-character string with a null-terminator.'\r\n    },\r\n    {\r\n        id: 'extern',\r\n        name: '.extern',\r\n        usage: '.extern sym size',\r\n        description: 'Declare that the item at sym with the specified size is a global label',\r\n        arguments: 'sym: the item to declare as global; size: the size of the item',\r\n        effect: 'The specified item is stored in a position which can be accessed quickly using $gp'\r\n    },\r\n    {\r\n        id: 'globl',\r\n        name: '.globl',\r\n        usage: '.globl label',\r\n        description: 'Declare that the specified label can be accessed from other files',\r\n        arguments: 'label: the label to make accessable form other files',\r\n        effect: 'The specified label will be accessable form other files'\r\n    },\r\n    {\r\n        id: 'set',\r\n        name: '.set',\r\n        usage: '.set arg',\r\n        description: 'Disable or re-enable warnings about the use of $at for subsequent lines',\r\n        arguments: 'arg: \\'noat\\' to disable warnings, \\'at\\' to enable warnings',\r\n        effect: 'Warnings will be enabled/disabled for subsequent lines',\r\n        notes: 'Since the assembler uses $at when expanding pseudoinstructions, care must be taken to ensure that values placed in $at are not overwritten'\r\n    },\r\n];","import { IGuide } from 'src/Models/IGuide';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const guideSource: IGuide[] = [\r\n    {\r\n        id: 'basics',\r\n        name: 'Basics',\r\n        description: 'Getting started with MIPS assembly and QtSpim',\r\n        items: [\r\n            { type: 'heading', text: \"What's QtSpim?\"},\r\n            { type: 'paragraph', text: \"QtSpim provides two major features for testing your MIPS assembly language code. First, QtSpim includes an assembler, which turns your assembly code into its binary equivalent (machine code). Second, QtSpim includes a simulator of a MIPS processor which allows you to test your code. When you write code in other languages, like c, a compiler can convert your code into machine code that you can test by running it directly on your computer's processor. When you write MIPS assembly, the code is specifically designed to run on a MIPS processor, which your computer does not have, so you need a simulator to test it.\"},\r\n            { type: 'heading', text: 'MIPS Processor Basics'},\r\n            { type: 'paragraph', text: \"Before you start learning to write MIPS assembly code, its important to understand some basic principles of how MIPS processors work. First, the MIPS processor uses a RISC (reduced instruction set computer) design. This means that it can perform a (relatively) small number of simple instructions, and more complex operations will require multiple instructions. Second, instructions in the MIPS architecture mostly fall into three categories: arithmetic/logical operations, memory operations, and branch/jump operations. Third, since arithmetic/logical operations are separate from memory operations, the processor uses a small set of special memory units in the processor called registers. All arithmetic & logical operations work on data stored in these registers. If you need to change a value in memory, it will require (at least) three instructions: one to load the current value from memory into a register, one to change the value, and one to store the value back to memory. The MIPS processor has 32 registers. They are referred to by a $ followed by a number (i.e., $0 - $31). Some registers have special purposes, many relating to writing procedures. To help remember the registers' purposes, they are usually referred to them by friendly names that start with a letter (e.g., $t2). You can see all the registers on the Registers page, but if you're just getting started it's safe to use the ones that start with a letter 's' (i.e., $s0 - $s7) or 't' (i.e., $t0 - $t9).\"},\r\n            { type: 'heading', text: 'Creating a MIPS assembly file'},\r\n            { type: 'paragraph', text: \"MIPS assembly is written as plain text. You can use a text editor like Visual Studio Code, Kate, or Sublime to write you code. Your file should use a .s or .asm extension so that QtSpim and your text editor recognize it as as assembly language file.\"},\r\n            { type: 'heading', text: 'A Simple MIPS Assembly Program'},\r\n            { type: 'paragraph', text: \"One of the functions the MIPS assembler performs is splitting up your code (referred to as text) from your variables (referred to as data) in memory. When you write MIPS assembly code, you need to tell the assembler whether the upcoming lines will be data or code declarations. This is done using an assembler directive; in MIPS assembly, assembler directives start with a period ('.'). You can see more assembler directives on the Assembler Directives page, but to get started, use a .text directive to let the assembler know you'll be writing code:\"},\r\n            { type: 'code', text: `.text`},\r\n            { type: 'paragraph', text: \"Once you've added a .text declaration, you'll need to let the assembler know where your program starts. In your program, you use labels to mark the location of a block of code or memory; labels end with a colon (':'). To let the assembler know where your program starts, use a label called main:\"},\r\n            { type: 'code', text: `main:`},\r\n            { type: 'paragraph', text: \"Once you've added the main label, you can start adding instructions. You can view most of the instructions supported by QtSpim on the Instructions page. Normally, you should write one instruction on each line of your file. You can use indentation to help organize your code if you'd like, but remember it does not have any special meaning to QtSpim.\"},\r\n            { type: 'paragraph', text: \"Instructions in MIPS assembly include a short mnemonic (typically just a few letters) that identifies what the processor should do, followed by some arguments. The arguments are mostly registers, but sometimes a constant value or label. To get started, you can initialize a register to a specific value using the load immediate ('li') instruction:\"},\r\n            { type: 'code', text: `li $t0, 3 # $t0 holds constant 3;li $t1, 6 # $t1 holds constant 6`},\r\n            { type: 'paragraph', text: \"Notice that the arguments (e.g., $t0 and 0) are separated by a comma, but there is no comma after the instruction name. You can also see these lines include comments using a pound sign ('#'). It's a good idea to use a comment on the first line that uses a register saying what the what your program will use the register for. You can't name the registers, so this is the best way to keep track of what each register holds.\"},\r\n            { type: 'paragraph', text: \"Once you've placed values into some of the registers, you can start to perform arithmetic operations on the values. For example, the following instruction adds the values in registers $t0 and $t1, and places the result into register $t2:\"},\r\n            { type: 'code', text: `add $t2, $t0, $t1 # $t2 holds the sum`},\r\n            { type: 'paragraph', text: \"For most MIPS assembly instructions, the destination register (where the result is stored) comes first, followed by the source register(s) (where the operands come from). So the add instruction above reads the current values in $t0 and $t1, adds the values, and places the result in $t2. If you aren't sure what order to put the arguments in for a specific instruction, it's always a good idea to check the Instructions page for information on how to use all the instructions. The page is also searchable by tags and descriptions, so if you know what you want to do but you aren't sure what the instruction is called, it's a good place to search.\"},\r\n            { type: 'paragraph', text: \"Once you've calculated some kind of result, you may want to display it to the user. This is done using the console provided by QtSpim. To do input or output using the console in QtSpim, you'll use a syscall (short for system call). This is a special kind of instruction that asks the system to do something. Unlink other instructions where all the arguments are specified in one line of code, the syscall instruction doesn't take any arguments at all. You need to use special registers to communicate what you would like the system to do. First, you place a special value into the register $v0 which tells the system what type of operation you are requesting. You can look up this value on the Syscall page. In this case, you want to print an integer to the console, so the value (sometimes called a syscall code or syscall number) is 1. You can use load immediate to put a value of 1 in $v0:\"},\r\n            { type: 'code', text: `li $v0, 0 # Syscall code for print int`},\r\n            { type: 'paragraph', text: \"The other piece of information you can get from the Syscall reference is what arguments a syscall uses. For printing an integer, there is a single argument (the value to print), and it needs to be placed in register $a0. Since the sum you calculated earlier is stored in $t2, you can use a move instruction to copy the sum into $a0:\"},\r\n            { type: 'code', text: `move $a0, $t2 # value to print`},\r\n            { type: 'paragraph', text: \"Note that the move instruction doesn't actually change the value in the original register, so it is better to think of it as a copy operation. Finally, once you have the syscall code and arguments set up, you can do the syscall using the syscall instruction:\"},\r\n            { type: 'code', text: `syscall`},\r\n            { type: 'paragraph', text: \"So the complete program to add two values and print the sum to the console looks like this:\"},\r\n            { type: 'code', text: `.text;;main:;    li $t0, 3           # $t0 holds constant 3;    li $t1, 6           # $t1 holds constant 6;;    add $t2, $t0, $t1   # $t2 holds the sum;;    li $v0, 1           # Syscall code for print int;    move $a0, $t2       # value to print;    syscall`},\r\n            { type: 'paragraph', text: \"To run the program in QtSpim, you can copy it into a text file and save it with a .s extension. Then, in QtSpim, use the Reinitialize and Load File button, select the file, and hit Run. If you want to run a program again or you've changed the code, use the Reinitialize and Load File button again. If you don't see any console window when you run the program, make sure Console is checked under the Window menu. \"},\r\n        ]\r\n    },\r\n    {\r\n        id: 'control-flow',\r\n        name: 'Control Flow',\r\n        description: 'Branching & jumping, if & if-else blocks, and loops',\r\n        items: [\r\n            { type: 'heading', text: \"Control flow\"},\r\n            { type: 'paragraph', text: \"Control flow is the order in which your code gets run by the processor. In a language like c, you can use statements like if, for, and while to specify blocks of code to jump over or repeat. MIPS assembly language doesn't have these statements, so code is simply run line after line starting at the main: label and continuing until the end of the file is reached. If you need to do anything more complex, you need to use branch or jump instruction.\"},\r\n            { type: 'paragraph', text: \"The simpler of the two is a jump instruction, which takes only a single argument, a label to jump to:\"},\r\n            { type: 'code', text: `main:;    li $t0, 3;    j blockTwo;    li $t1, 2;blockTwo:;    li $t2, 5`},\r\n            { type: 'paragraph', text: \"In the code block above, the jump instruction ('j') causes the processor to skip over the line which sets the value of $t1, go immediately to the label called 'blockTwo', and start executing from there. Of course this alone isn't particularly useful, so MIPS also includes branch instructions. Branch instructions work similarly to jump instructions except they only go to the specified label if a condition is true. There are different branch instructions for different conditions. For example, the branch equal instruction ('beq') only branches to the specified label if two registers are equal:\"},\r\n            { type: 'code', text: `main:;    li $t0, 1;    li $t1, 5;    li $t2, 5;    beq $t0, $t1, blockOne;    beq $t1, $t2, blockTwo;    li $t3, 6;;blockOne:;    li $t4, 3;;blockTwo:;    li $t5, 4`},\r\n            { type: 'paragraph', text: \"In the code block above, the first branch instruction doesn't do anything, because the values in $t0 and $t1 are not equal. The second branch instruction causes the processor to jump to the label blockTwo because the values in $t1 and $t2 are equal. If you ran this block of code, the values of $t0, $t1, $t2, and $t5 would be set; the values of $t3 and $t4 will not be affected because the instructions that reference them get skipped over. Again, this example isn't particularly useful. You'll see in the sections below how branch statements can be used to create code that works similarly to typical control flow constructs seen in higher level languages.\"},\r\n            { type: 'heading', text: \"If Block\"},\r\n            { type: 'paragraph', text: \"The simplest control flow construct is an if block, a block of code that only runs if a specific condition is true. In a higher level language, that might look like this:\"},\r\n            { type: 'code', text: `if (t0 >= t1) {;    t2 = 7;};t3 = 6;`},\r\n            { type: 'paragraph', text: \"The equivalent code in MIPS:\"},\r\n            { type: 'code', text: `    blt $t0, $t1, lessThan;    li $t2, 7;lessThan:;    li $t3, 6`},\r\n            { type: 'paragraph', text: \"Due to the way MIPS assembly is laid out, the easiest way to write an if statement is usually to invert the condition. In this case, we only wanted to set the value of $t2 if $t0 is greater than or equal to $t1. To do so we used the branch less than instruction ('blt') to skip over the line that sets the value of $t2 if $t0 is less than $t1.\"},\r\n            { type: 'heading', text: \"If-Else Block\"},\r\n            { type: 'paragraph', text: \"A slightly more complex example is an if-else block. In a higher level language, that might look like this:\"},\r\n            { type: 'code', text: `if (t0 >= t1) {;    t2 = 7;};else {;   t3 = 6;};t4 = 10`},\r\n            { type: 'paragraph', text: \"The equivalent code in MIPS:\"},\r\n            { type: 'code', text: `    bge $t0, $t1 greaterThanOrEqual;    li $t3, 6;    j doneIfElse;greaterThanOrEqual:;    li $t2, 7;doneIfElse:;    li $t4, 10;`},\r\n            { type: 'paragraph', text: \"Again, due to the way MIPS is laid out, things get flipped a bit. In this case, the 'else' part comes before the 'if' part. Also note that the first block must end with a jump statement that skips over the second block; otherwise both of the blocks would get executed.\"},\r\n            { type: 'heading', text: \"For Loop\"},\r\n            { type: 'paragraph', text: \"A simple for loop in a higher level language might look like this:\"},\r\n            { type: 'code', text: `for (t0 = 0, t0 < 10, t0++) {;    t2 = t2 + 4;}`},\r\n            { type: 'paragraph', text: \"The equivalent code in MIPS:\"},\r\n            { type: 'code', text: `    li $t0, 0               # $t0 will be the loop counter;    li $t1, 10              # $t1 will be the max value;;loop:;    bge $t0, $t1, exitLoop  # if the counter is greater than or equal to the max, exit the loop;    addi $t2, $t2, 4        # add 4 to $t2;    addi $t0, $t0, 1        # increment the loop counter;    b loop                  # run the loop again;;exitLoop:                   # if we get here, the loop is done;...;`},\r\n            { type: 'paragraph', text: \"Writing a loop will require at least one label and one branch statement. In this case, it is written with two of each. If you know for sure that your loop should run at least once, it can be written with a single label at the top, and a conditional branch at the bottom that branches back to the label at the top if the loop needs to run again. If the loop might not even have to run once, the format shown here is needed because it checks the conditional at the top of the loop. If you forget the instruction that implements the loop counter (or otherwise construct a loop incorrectly), you might create an infinite loop. If you code has an infinite loop and you run it in QtSpim, QtSpim will likely freeze or crash. You might need to use force quit the program.\"},\r\n            { type: 'heading', text: \"Nested For Loop\"},\r\n            { type: 'paragraph', text: \"A nested for loop that prints out the first ten multiples of the first ten positive integers in a higher level language might look like this:\"},\r\n            { type: 'code', text: `for (t0 = 1, t0 <= 10, t0++) {;    for (t1 = 1, t1 <= 10, t1++) {;        print (t0 * t1);    };}`},\r\n            { type: 'paragraph', text: \"The equivalent code in MIPS:\"},\r\n            { type: 'code', text: `    li $t0, 1                           # $t0 is the outer loop counter;    li $t1, 1                           # $t1 is the inner loop counter;    li $t2, 10                          # $t2 is the max value;;outerLoop:;    bgt $t0, $t2, exitOuterLoop         # if counter > max, exit outer loop;    li $t1, 1                           # reset the inner loop counter every time the outer loop runs;innerLoop:;    bgt $t1, $t2, exitInnerLoop         # is counter > max, exit inner loop;    mul $a0, $t0, $t1                   # calculate the sum;    li $v0, 1                           # syscall code for print int;    syscall;    li $v0, 11                          # Syscall code for printing a character;    li, $a0, 32                         # ASCII value of space;    syscall;    addi $t1, $t1, 1                    # increment inner loop counter;    b innerLoop                         # do the inner loop again;exitInnerLoop:;    addi $t0, $t0, 1                    # increment outer loop counter;    b outerLoop                         # do the outer loop again;exitOuterLoop:`},\r\n            { type: 'paragraph', text: \"With nested loops, be sure to leave clear comments for yourself and name your labels logically. Since you'll need multiple labels and counters, it's important to keep everything straight.\"}\r\n        ]\r\n    },\r\n    {\r\n        id: 'arrays',\r\n        name: 'Arrays',\r\n        description: 'Creating, reading, and editing arrays',\r\n        items: [\r\n            { type: 'heading', text: 'Allocating Arrays'},\r\n            { type: 'paragraph', text: 'MIPS has no built-in concept of arrays, meaning they must be managed by the programmer from start to finish. The first step is to allocate space for the array, which should be done in a .data section:'},\r\n            { type: 'code', text: `.data;...;myArray: .space 40`},\r\n            { type: 'paragraph', text: \"The declaration has three parts. First, a label, which allows you to refer to the memory segment from your code. Second, the assembler directive .space, which tells the assembler to reserve bytes in the data segment. Finally, the number 40, which tells the assembler how many bytes to reserve. You might have noticed the declaration does not include a data type. In programming languages like c, the size of an array is automatically calculated by multiplying the number of items (length) by each item's size. In MIPS, you must do this manually. For example, integers in MIPS have a size of 4 bytes. Thus, an array of 10 integers requires 10 × 4 = 40 bytes.\"},\r\n            { type: 'heading', text: 'Accessing Array Elements'},\r\n            { type: 'paragraph', text: \"Just like you must manually calculate the size of an array for allocation, you must manually calculate the location of items in an array to access them. Arrays store items one after another in memory, so to access a specific item you must first determine where the array begins in memory, then determine the item's offset within the array. Finding the memory address where an array starts can be done with the load address pseudoinstruction:\"},\r\n            { type: 'code', text: `la $t0, myArray     # Store the base address in $t0`},\r\n            { type: 'paragraph', text: \"The next step is to calculate the offset. As an example, lets access the item with index 3:\"},\r\n            { type: 'code', text: `li $t1, 3           # Store the desired index in $t1`},\r\n            { type: 'paragraph', text: \"To do this, multiply the index of the desired item by the size of the items in the array. In the case of an integer array, the size is 4 bytes, so you index must be multiplied by 4. The most obvious way to do this is using the mul pseudoinstruction:\"},\r\n            { type: 'code', text: `li $t2, 4           # Store the size of an int;mul $t1, $t1, $t2   # Multiply the index by the size of an int`},\r\n            { type: 'paragraph', text: \"You can do this more efficiently by using a shift. Multiplying by 4 in binary is similar to multiplying by 100 in decimal: it moves the decimal two places. MIPS lets you shift numbers with a single instruction; in this case we will shift two places to the left using shift left logical:\"},\r\n            { type: 'code', text: `sll $t1, $t1, 2`},\r\n            { type: 'paragraph', text: \"Whichever method you used to calculate the offset, you now need to add it to the base address of the array:\"},\r\n            { type: 'code', text: `add $t1, $t0, $t1`},\r\n            { type: 'paragraph', text: \"Finally we have the address of the item we want to access! The last step is to get the item's value. We can do this using a load command. Since integers are 4 bytes, we will use load word:\"},\r\n            { type: 'code', text: `lw $t2, 0($t1)`},\r\n            { type: 'heading', text: 'Editing Array Elements'},\r\n            { type: 'paragraph', text: \"Editing array elements is very similar to accessing them. You must follow the same procedure to calculate the item's location. Assuming you followed the instructions in the previous section to calculate the item's address in $t1, you can use a store word instruction to change the value:\"},\r\n            { type: 'code', text: `li $t3, 21          # We want to store 21 into the array;sw $t3, 0($t1)`},\r\n            { type: 'paragraph', text: \"Putting the registers in the wrong order is a common mistake when using store word. When done correctly, the first register specified is the value to be stored, and the second register specified is the memory location where the item should be stored. This can seem backwards because most MIPS instructions list the destination register first (although technically speaking neither register is a destination because store word does not change the contents of either register).\"},\r\n            { type: 'heading', text: 'Looping Over Arrays'},\r\n            { type: 'paragraph', text: \"Looping over arrays typically involves tracking a counter as well as a current position in memory. With every iteration of the loop, the counter must be increased by 1 and the position in memory must be increased by the size of the items in the array. Here is an example which tracks a count in $t0 and a memory position in $t1. It prints out a 10 item array of integers to the console:\"},\r\n            { type: 'code', text: `li $t0, 0           # Initialize count to 0;la $t1, myArray     # Initialize memory position to start of the myArray;li $t2, 9           # Maximum index for a 10 item array;;loop:;lw $t3, 0($t1)      # Access the current item;li $v0, 1           # Syscall code for printing an int;move $a0, $t3       # Place the current item for Syscall;syscall;;addi $t0, $t0, 1    # Increment count;addi $t1, $t1, 4    # Increment memory position by 4 (size of an int);ble $t0, $t2, loop  # Loop again if the index is not greater than the maximum`},\r\n        ]\r\n    },\r\n    {\r\n        id: 'strings',\r\n        name: 'Strings',\r\n        description: 'Creating, reading, and printing strings',\r\n        items: [\r\n            { type: 'heading', text: 'Initialized Strings'},\r\n            { type: 'paragraph', text: 'MIPS assembly allows you to create string which are initialized to a given value using the .ascii and .asciiz directives:' },\r\n            { type: 'code', text: '.data;...;myString: .asciiz \"Hello world\\\\n\"'},\r\n            { type: 'paragraph', text: 'The .asciiz directive automatically adds a null terminator to the string (which is necessary for printing to the console), so in most cases it is preferred. The declaration has three parts. First, a label, which allows you to refer to the string from your code. Second, the assembler directive .asciiz, which tells the assembler to reserve bytes in the data segment and prefill them with the given string. Finally, a string to place in memory. The size is automatically calculated based on the length of the given string.'},\r\n            { type: 'heading', text: 'Printing Strings to the Console'},\r\n            { type: 'paragraph', text: 'Strings can be printed to the console using a syscall:' },\r\n            { type: 'code', text: 'li $v0, 4           # Syscall code for printing a string;la, $a0, myString   # Address of string to print;syscall'},\r\n            { type: 'paragraph', text: 'The system keeps printing characters until it finds a null terminator, so strings must be null terminated for printing to the console. You might have noticed that the string in this example contains a new line character (the \\\\n); this is useful for keeping the console output readable.' },\r\n            { type: 'heading', text: 'Printing Newlines to the Console'},\r\n            { type: 'paragraph', text: 'In the previous example a newline was added to the string to keep the output readable. Sometimes you need to print just a newline. While you can accomplish this by creating a string in the .data section containing only a newline, you can also use the print character syscall as a shortcut:' },\r\n            { type: 'code', text: 'li $v0, 11          # Syscall code for printing a character;li, $a0, 10         # ASCII value of newline;syscall'},\r\n            { type: 'heading', text: 'Reading Strings from the Console'},\r\n            { type: 'paragraph', text: 'To read a string from the console, you must first allocate space for the string using the .space directive in the .data section:' },\r\n            { type: 'code', text: '.data;...;inString: .space 10'},\r\n            { type: 'paragraph', text: 'Note that you must allocate space for the null terminator. In this example, allocating 10 bytes will actually only allow 9 characters to be read from the console.' },\r\n            { type: 'paragraph', text: 'Next, you can read a string using a syscall:' },\r\n            { type: 'code', text: 'li $v0, 8           # Syscall code for reading a string;la, $a0, inString   # Address to store the string at;li $a1, 10          # Length of string to read;syscall;'},\r\n            { type: 'paragraph', text: 'The length specified is a maximum; the syscall will keep reading characters until you enter a newline (press enter) or it runs out of space. If you press enter before the maximum number of characters has been read, the newline character (ASCII value 10) will be included in the inputted string. Note that the length includes the null terminator. In this example, only 9 characters (at most) will be read from the console because we specified a length of 10.' },\r\n            { type: 'heading', text: 'Looping over Strings'},\r\n            { type: 'paragraph', text: 'Looping over a string (character by character) can be accomplished using a register, which holds the address of the current character, and the lbu instruction, which will load a single byte from memory. You may see the lb instruction used in some examples, but lbu is preferred because characters are not signed values (although QtSpim only supports 7-bit ASCII characters so it technically does not matter either way). When you load a character into a register using lbu, the destination register will hold a number which is the ASCII value of the character. You can refer to an ASCII table to see which characters correspond to which values.' },\r\n            { type: 'paragraph', text: 'Here is a complete example program which reads a string from the user and loops over it to check if it contains the letter m:' },\r\n            { type: 'code', text: '.data;prompt: .asciiz \"Enter a string (20 characters max): \";resultYes: .asciiz \"The string contained the letter m\";resultNo: .asciiz \"The string did not contain the letter m\";input: .space 21;;.text;main:;;li $v0, 4           # Syscall code for printing a string;la, $a0, prompt     # Address of string to print;syscall;;li $v0, 8           # Syscall code for reading a string;la, $a0, input      # Address to store the string at;li $a1, 21          # Length of string to read;syscall;;la $t0, input        # $t0 will hold current position in the string;li $t1, 109          # ASCII value of lower-case m;loop:;lbu $t2, 0($t0)      # Read a character from the string;beqz $t2, notFound   # If the character is a null terminator (zero), jump to notFound;beq $t2, $t1, found  # If the character is m, jump to found;addi $t0, $t0, 1     # Increment loop counter;b loop               # Did not find a null terminator or an m, so loop again;;notFound:;li $v0, 4           # Syscall code for printing a string;la, $a0, resultNo   # Address of string to print;syscall;;li $v0, 10          # Syscall code to terminate;syscall;;found:;li $v0, 4           # Syscall code for printing a string;la, $a0, resultYes  # Address of string to print;syscall;;li $v0, 10          # Syscall code to terminate;syscall'},\r\n            { type: 'paragraph', text: 'Note: the address of the current character can be used as a \"counter\" when looping over a string. Each iteration of the loop should increment the counter by 1 (since characters are only 1 byte in ASCII). When the character read is a null terminator (ASCII value 0), the loop should stop.' },\r\n        ]\r\n    },\r\n    {\r\n        id: 'errors',\r\n        name: 'Errors',\r\n        description: 'Common QtSpim errors',\r\n        items: [\r\n            { type: 'paragraph', text: 'QtSpim error messages can be a bit terse. This guide includes frequent errors in QtSpim and tips for fixing the most common causes.' },\r\n            { type: 'heading', text: \"Syntax Error\"},\r\n            { type: 'code', text: \"spim: (parser) syntax error on line n of file /*/*.s    inst args\"},\r\n            { type: 'paragraph', text: 'This error message indicates that the line of code shown cannot be understood by QtSpim. Common causes include misspelled instruction names, typos in register names or other arguments, and missing commas. You may also see the error if you are using an instruction which is supported in other environments (e.g. MARS) but not in QtSpim.' },\r\n            { type: 'heading', text: 'Label is Defined for the Second Time'},\r\n            { type: 'code', text: 'Error Message:;spim: (parser) Label is defined for the second time on line n of file /*/*.s    label:'},\r\n            { type: 'paragraph', text: 'This error indicates a label has been defined twice. Double check that you have not used the same label name twice in your program. This error also occurs if you load a file twice in QtSpim without re-initializing; make sure you are using \"Reinitialize and Load File\" not \"Load File\".' },\r\n            { type: 'heading', text: 'Instruction References Undefined Symbol'},\r\n            { type: 'code', text: 'Error Message:;Instruction references undefined symbol at 0x00400014 [00400014] 0x0c000000  jal 0x00000000 [main]    : 188: jal main '},\r\n            { type: 'paragraph', text: 'This error indicates your program has no main label. Try adding main: to the start of your .text segment.' },\r\n            { type: 'code', text: 'Error Message:;Instruction references undefined symbol at 0x-------- [--------] 0x--------  inst <args>    : ---: inst <args> '},\r\n            { type: 'paragraph', text: 'This error indicates your program is trying to reference a label which is not defined. The most common cause is typos. If the instruction resulting in the error is la, lw, or sw, the corresponding label should be in the .data section. If the instruction resulting the error is a branch or jump, the corresponding label should be in the .text section.' },\r\n            { type: 'heading', text: 'Attempt to Execute Non-Instruction'},\r\n            { type: 'code', text: 'Error Message:;Attempt to execute non-instruction at 0x--------'},\r\n            { type: 'paragraph', text: 'This error message indicates that the program counter is not referencing a valid instruction. The most common cause is that your program does not end with a syscall for termination (syscall code 10). It could also be caused by calling jr $ra with an incorrect address in $ra.' },\r\n            { type: 'heading', text: 'Unaligned Address'},\r\n            { type: 'code', text: 'Error Message:;Unaligned address in inst/data fetch: 0x--------'},\r\n            { type: 'paragraph', text: 'This error message indicates that you are trying to access a memory address that is not aligned to the expected boundary for the current instruction. In most cases, this results from using lw or sw to access an item from the .data section. In the .data section, try adding .align 2 on the line above the item you are trying to access.' },\r\n            { type: 'heading', text: 'Bad Address'},\r\n            { type: 'code', text: 'Error Message:;Bad address in data/stack read: 0x--------'},\r\n            { type: 'paragraph', text: 'This error message indicates that you are trying to access a memory address that is available to be read/written. In most cases, this results from using a load or store instruction with an incorrectly calculated address. In particular, an unset register with a value of 0 is a \"bad address\". Ensure the address you are trying to access correctly references an item declared in the .data section.' },\r\n            { type: 'heading', text: \"Can't Put Data in Text Segment\"},\r\n            { type: 'code', text: \"Error Message:;Can't put data in text segment on line n of file /*/*.s    .label .type args\"},\r\n            { type: 'paragraph', text: 'This error message indicates that you are trying to use a directive that belongs in a .data segment in another segment. Most commonly, it is caused by forgetting the .data directive.' },\r\n            { type: 'heading', text: \"Target of Jump Differs in High-Order 4 Bits from Instruction PC\"},\r\n            { type: 'code', text: \"Error Message:;Target of jump differs in high-order 4 bits from instruction pc 0x400014\"},\r\n            { type: 'paragraph', text: 'This error message indicates that you are trying to jump further than a jump instruction will allow. The most common cause is forgetting the .text directive prior to your code (which means the main label will not be within the text segment as expected). This error can also be caused by a jump instruction which accidentally references the label of an item in the .data section.' },\r\n        ]\r\n    }\r\n]","import { IInstruction, instructionCategory } from 'src/Models/IInstruction';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const instructionSource: IInstruction[] = [\r\n    {\r\n        id: 'move',\r\n        assemblyName: 'move',\r\n        name: 'Move',\r\n        description: 'Move a value from one register to another',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'addiu $t, $s, $0'\r\n            ]\r\n        },\r\n        usage: 'move $t, $s',\r\n        result: 't = s',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'movn',\r\n        assemblyName: 'movn',\r\n        name: 'Move on Not Zero',\r\n        description: 'Move a value if a register is not zero',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '001011'\r\n        },\r\n        usage: 'movn $d, $s, $t',\r\n        result: 'if (t != 0) d = s;'\r\n    },\r\n    {\r\n        id: 'movz',\r\n        assemblyName: 'movz',\r\n        name: 'Move On Zero',\r\n        description: 'Move a value if a register is zero',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '001010'\r\n        },\r\n        usage: 'movz $d, $s, $t',\r\n        result: 'if (t == 0) d = s;'\r\n    },\r\n    {\r\n        id: 'movf',\r\n        assemblyName: 'movf',\r\n        name: 'Move on Floating Point Conditional False',\r\n        description: 'Move a value if a floating point conditional is false',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'RC-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            cc: 'ccc',\r\n            cond: '00',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '000001'\r\n        },\r\n        usage: 'movf $d, $s, cc',\r\n        result: 'if (!floating point conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'movt',\r\n        assemblyName: 'movt',\r\n        name: 'Move on Floating Point Conditional True',\r\n        description: 'Move a value if a floating point conditional is true',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'RC-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            cc: 'ccc',\r\n            cond: '01',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '000001'\r\n        },\r\n        usage: 'movt $d, $s, cc',\r\n        result: 'if (floating point conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'li',\r\n        assemblyName: 'li',\r\n        name: 'Load Immediate',\r\n        description: 'Load an immediate value into a register',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $t, imm[31-16]',\r\n                'ori $t, $t, imm[15-0]'\r\n            ]\r\n        },\r\n        usage: 'li $t, imm',\r\n        result: 't = imm',\r\n        notes: 'Since this instruction is commonly used to initialize a register before first use, it is a good idea to leave a comment saying what the register will be used for or the meaning of the constant value.',\r\n        tags: 'initialize constant'\r\n    },\r\n    {\r\n        id: 'lui',\r\n        assemblyName: 'lui',\r\n        name: 'Load Upper Immediate',\r\n        description: 'Load an immediate value into the upper 16 bits of a register',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001111',\r\n            rs: '-----',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lui $t, imm',\r\n        result: 't = imm << 16'\r\n    },\r\n    {\r\n        id: 'la',\r\n        assemblyName: 'la',\r\n        name: 'Load Address',\r\n        description: 'Load a label\\'s address into a register',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $t, label[31-16]',\r\n                'ori $t, $t, label[15-0]'\r\n            ]\r\n        },\r\n        usage: 'la $t, label',\r\n        result: 't = label'\r\n    },\r\n    {\r\n        id: 'syscall',\r\n        assemblyName: 'syscall',\r\n        name: 'Syscall',\r\n        description: 'Request an operation from the system',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '001100'\r\n        },\r\n        usage: 'syscall',\r\n        result: '<depends>',\r\n        notes: 'Syscall can be used for console IO, memory allocation, program termination, and other tasks. See syscall reference for details.'\r\n    },\r\n    {\r\n        id: 'break',\r\n        assemblyName: 'break',\r\n        name: 'Break',\r\n        description: 'Cause exception with specified code',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '001101'\r\n        },\r\n        usage: 'break n',\r\n        result: 'An exception is thrown with code n',\r\n        notes: 'Code 1 is reserved for the debugger.'\r\n    },\r\n    {\r\n        id: 'nop',\r\n        assemblyName: 'nop',\r\n        name: 'No Operation',\r\n        description: 'Do nothing for a cycle',\r\n        category: instructionCategory.MISC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'sll $0, $0, $0'\r\n            ]\r\n        },\r\n        usage: 'nop',\r\n        result: '<no effect>',\r\n        notes: 'Used to make the processor do nothing for a cycle. For example, a nop may be used after a branch to delay the next instruction until the branch result is computed. The equivalent instruction is a shift of 0 places on an unassignable register (which does nothing), and is easily identified by its binary encoding: 00000000000000000000000000000000.'\r\n    },\r\n    {\r\n        id: 'add',\r\n        assemblyName: 'add',\r\n        name: 'Add',\r\n        description: 'Add two registers',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '100000'\r\n        },\r\n        usage: 'add $d, $s, $t',\r\n        result: 'd = s + t',\r\n        tags: 'add addition plus'\r\n    },\r\n    {\r\n        id: 'addu',\r\n        assemblyName: 'addu',\r\n        name: 'Add Unsigned',\r\n        description: 'Add two registers without overflow',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '100001'\r\n        },\r\n        usage: 'addu $d, $s, $t',\r\n        result: 'd = s + t',\r\n        tags: 'add addition plus'\r\n    },\r\n    {\r\n        id: 'addi',\r\n        assemblyName: 'addi',\r\n        name: 'Add Immediate',\r\n        description: 'Add a register and an immediate',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'addi $t, $s, imm',\r\n        result: 't = s + imm',\r\n        tags: 'add addition plus'\r\n    },\r\n    {\r\n        id: 'addiu',\r\n        assemblyName: 'addiu',\r\n        name: 'Add Immediate Unsigned',\r\n        description: 'Add a register and an immediate without overflow',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001001',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'addiu $t, $s, imm',\r\n        result: 't = s + imm',\r\n        tags: 'add addition plus'\r\n    },\r\n    {\r\n        id: 'sub',\r\n        assemblyName: 'sub',\r\n        name: 'Subtract',\r\n        description: 'Subtract one register from another register',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '100010'\r\n        },\r\n        usage: 'sub $d, $s, $t',\r\n        result: 'd = s - t',\r\n        tags: 'sub subtraction minus'\r\n    },\r\n    {\r\n        id: 'subu',\r\n        assemblyName: 'subu',\r\n        name: 'Subtract Unsigned',\r\n        description: 'Subtract one register from another register without overflow',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '100011'\r\n        },\r\n        usage: 'subu $d, $s, $t',\r\n        result: 'd = s - t',\r\n        tags: 'sub subtraction minus'\r\n    },\r\n    {\r\n        id: 'subi',\r\n        assemblyName: 'sub',\r\n        name: 'Subtract Immediate',\r\n        description: 'Subtract an immediate from a register',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'addi $t, $s, -imm    # imm > -2^15',\r\n                '',\r\n                'ori $at, $0, imm     # imm == -2^15',\r\n                'sub $t, $s, $at'\r\n            ]\r\n        },\r\n        usage: 'sub $t, $s, imm',\r\n        result: 't = s - imm',\r\n        notes: 'MIPS does not provide a subtract immediate instruction because the immediate value can simply be negated by the assembler, and addi used instead. If the value is -2^15 (which cannot be negated in 16 bit 2\\'s complement), two equivalent instructions are needed. This instruction may also be available as subi in environments other than QtSpim.',\r\n        tags: 'sub subtraction minus'\r\n    },\r\n    {\r\n        id: 'subiu',\r\n        assemblyName: 'subu',\r\n        name: 'Subtract Immediate Unsigned',\r\n        description: 'Subtract an immediate from a register without overflow',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'addiu $t, $s, -imm    # imm > -2^15',\r\n                '',\r\n                'ori $at, $0, imm      # imm == -2^15',\r\n                'subu $t, $s, $at'\r\n            ]\r\n        },\r\n        usage: 'subu $t, $s, imm',\r\n        result: 't = s - imm',\r\n        notes: 'MIPS does not provide a subtract immediate unsigned instruction because the immediate value can simply be negated by the assembler, and addiu used instead. If the value is -2^15 (which cannot be negated in 16 bit 2\\'s complement), two equivalent instructions are needed. This instruction may also be available as subiu in environments other than QtSpim.',\r\n        tags: 'sub subtraction minus'\r\n    },\r\n    {\r\n        id: 'mult',\r\n        assemblyName: 'mult',\r\n        name: 'Multiply',\r\n        description: 'Multiply two integers',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '011000'\r\n        },\r\n        usage: 'mult $s, $t',\r\n        result: '[HI, LO] = s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'multu',\r\n        assemblyName: 'multu',\r\n        name: 'Multiply Unsigned',\r\n        description: 'Multiply two integers (unsigned)',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '011001'\r\n        },\r\n        usage: 'multu $s, $t',\r\n        result: '[HI, LO] = s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'madd',\r\n        assemblyName: 'madd',\r\n        name: 'Multiply and Add',\r\n        description: 'Multiply two integers and add',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            special: '-----',\r\n            funct: '000000'\r\n        },\r\n        usage: 'madd $s, $t',\r\n        result: '[HI, LO] += s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'maddu',\r\n        assemblyName: 'maddu',\r\n        name: 'Multiply and Add Unsigned',\r\n        description: 'Multiply two integers and add (unsigned)',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            special: '-----',\r\n            funct: '000001'\r\n        },\r\n        usage: 'maddu $s, $t',\r\n        result: '[HI, LO] += s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'msub',\r\n        assemblyName: 'msub',\r\n        name: 'Multiply and Subtract',\r\n        description: 'Multiply two integers and subtract',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            special: '-----',\r\n            funct: '000100'\r\n        },\r\n        usage: 'msub $s, $t',\r\n        result: '[HI, LO] -= s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'msubu',\r\n        assemblyName: 'msubu',\r\n        name: 'Multiply and Subtract Unsigned',\r\n        description: 'Multiply two integers and subtract (unsigned)',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            special: '-----',\r\n            funct: '000101'\r\n        },\r\n        usage: 'msubu $s, $t',\r\n        result: '[HI, LO] -= s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'mul',\r\n        assemblyName: 'mul',\r\n        name: 'Multiply and Return Lower 32 Bits',\r\n        description: 'Multiply two integers, keeping only the lower 32 bits',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            special: '-----',\r\n            funct: '000010'\r\n        },\r\n        usage: 'mul $d, $s, $t',\r\n        result: 'd = s * t (lower 32 bits only)',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'mulo',\r\n        assemblyName: 'mulo',\r\n        name: 'Multiply and Return Lower 32 Bits With Overflow',\r\n        description: 'Multiply two integers, keeping only the lower 32 bits and checking for overflow',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'mult $s, $t',\r\n                'mfhi $at',\r\n                'mflo $d',\r\n                'sra $d, $d, 31',\r\n                'beq $at, $d, 8',\r\n                'break',\r\n                'mflo $d'\r\n            ]\r\n        },\r\n        usage: 'mulo $d, $s, $t',\r\n        result: 'd = s * t (lower 32 bits only)',\r\n        notes: 'Will cause an exception if the result does not fit in 32 bits.',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'mulou',\r\n        assemblyName: 'mulou',\r\n        name: 'Multiply and Return Lower 32 Bits With Overflow Unsigned',\r\n        description: 'Multiply two integers, keeping only the lower 32 bits and checking for overflow (unsigned)',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'multu $s, $t',\r\n                'mfhi $at',\r\n                'beq $at, $0, 8',\r\n                'break',\r\n                'mflo $d'\r\n            ]\r\n        },\r\n        usage: 'mulou $d, $s, $t',\r\n        result: 'd = s * t (lower 32 bits only)',\r\n        notes: 'Will cause an exception if the result does not fit in 32 bits.',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'div',\r\n        assemblyName: 'div',\r\n        name: 'Divide',\r\n        description: 'Divide two integers',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '011010'\r\n        },\r\n        usage: 'div $s, $t',\r\n        result: 'LO = s / t; HI = s % t',\r\n        tags: 'divide division modulo modulus'\r\n    },\r\n    {\r\n        id: 'divu',\r\n        assemblyName: 'divu',\r\n        name: 'Divide Unsigned',\r\n        description: 'Divide two integers (unsigned)',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '00000',\r\n            funct: '011011'\r\n        },\r\n        usage: 'divu $s, $t',\r\n        result: 'LO = s / t; HI = s % t',\r\n        tags: 'divide division'\r\n    },\r\n    {\r\n        id: 'quotient',\r\n        assemblyName: 'div',\r\n        name: 'Divide and return the quotient',\r\n        description: 'Divide two integers, returning only the quotient',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'div $s, $t',\r\n                'mflo $d'\r\n            ]\r\n        },\r\n        usage: 'div $d, $s, $t',\r\n        result: 'd = s / t (whole part only)',\r\n        tags: 'divide division'\r\n    },\r\n    {\r\n        id: 'rem',\r\n        assemblyName: 'rem',\r\n        name: 'Divide and return the remainder',\r\n        description: 'Divide two integers, returning only the remainder',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'div $s, $t',\r\n                'mfhi $d'\r\n            ]\r\n        },\r\n        usage: 'rem $d, $s, $t',\r\n        result: 'd = s % t',\r\n        tags: 'divide division modulo modulus'\r\n    },\r\n    {\r\n        id: 'mfhi',\r\n        assemblyName: 'mfhi',\r\n        name: 'Move from HI',\r\n        description: 'Move the value in HI to another register',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: '-----',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '010000'\r\n        },\r\n        usage: 'mfhi $d',\r\n        result: 'd = HI'\r\n    },\r\n    {\r\n        id: 'mthi',\r\n        assemblyName: 'mthi',\r\n        name: 'Move to HI',\r\n        description: 'Move the value in a register to HI',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '010001'\r\n        },\r\n        usage: 'mthi $s',\r\n        result: 'HI = s'\r\n    },\r\n    {\r\n        id: 'mflo',\r\n        assemblyName: 'mflo',\r\n        name: 'Move from LO',\r\n        description: 'Move the value in LO to a register',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: '-----',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '010010'\r\n        },\r\n        usage: 'mflo $d',\r\n        result: 'd = LO'\r\n    },\r\n    {\r\n        id: 'mtlo',\r\n        assemblyName: 'mtlo',\r\n        name: 'Move to LO',\r\n        description: 'Move the value in a register to LO',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '010011'\r\n        },\r\n        usage: 'mtlo $s',\r\n        result: 'LO = s'\r\n    },\r\n    {\r\n        id: 'abs',\r\n        assemblyName: 'abs',\r\n        name: 'Absolute Value',\r\n        description: 'Find the absolute value of an integer',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'addu $s, $0, $t',\r\n                'bgez $t, 4',\r\n                'sub $s, $0, $t'\r\n            ]\r\n        },\r\n        usage: 'abs $s, $t',\r\n        result: 's = |t|'\r\n    },\r\n    {\r\n        id: 'neg',\r\n        assemblyName: 'neg',\r\n        name: 'Negate',\r\n        description: 'Find the negation of an integer',\r\n        category: instructionCategory.ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'sub $s, $0, $t'\r\n            ]\r\n        },\r\n        usage: 'neg $s, $t',\r\n        result: 's = -t'\r\n    },\r\n    {\r\n        id: 'b',\r\n        assemblyName: 'b',\r\n        name: 'Branch Unconditionally',\r\n        description: 'Branch with no condition',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'beq $0, $0, label'\r\n            ]\r\n        },\r\n        usage: 'b label',\r\n        result: 'PC = label;'\r\n    },\r\n    {\r\n        id: 'bal',\r\n        assemblyName: 'bal',\r\n        name: 'Branch Unconditionally and Link',\r\n        description: 'Branch with no condition and link',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bgezal $0, label'\r\n            ]\r\n        },\r\n        usage: 'bal label',\r\n        result: 'RA = PC + 4; PC = label;'\r\n    },\r\n    {\r\n        id: 'beq',\r\n        assemblyName: 'beq',\r\n        name: 'Branch on Equal',\r\n        description: 'Branch if two registers have the same value',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '000100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'beq $s, $t, label',\r\n        result: 'if (s == t) PC = label;'\r\n    },\r\n    {\r\n        id: 'beqi',\r\n        assemblyName: 'beq',\r\n        name: 'Branch on Equal to Immediate',\r\n        description: 'Branch if a register is equal to an immediate',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'ori $at, $0, imm',\r\n                'beq $t, $at, label'\r\n            ]\r\n        },\r\n        usage: 'beq $t, imm, label',\r\n        result: 'if (t == imm) PC = label;'\r\n    },\r\n    {\r\n        id: 'beqz',\r\n        assemblyName: 'beqz',\r\n        name: 'Branch on Equal to Zero',\r\n        description: 'Branch if a register is equal to zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'beq $s, $0, C'\r\n            ]\r\n        },\r\n        usage: 'beqz $s, label',\r\n        result: 'if (s == 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'bne',\r\n        assemblyName: 'bne',\r\n        name: 'Branch on not Equal',\r\n        description: 'Branch if two registers do not have the same value',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '000101',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bne $s, $t, label',\r\n        result: 'if (s != t) PC = label;'\r\n    },\r\n    {\r\n        id: 'bnei',\r\n        assemblyName: 'bne',\r\n        name: 'Branch on not Equal to Immediate',\r\n        description: 'Branch if a register is not equal to an immediate',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'ori $at, $0, imm',\r\n                'bne $t, $at, label'\r\n            ]\r\n        },\r\n        usage: 'bne $t, imm, label',\r\n        result: 'if (t != imm) PC = label;'\r\n    },\r\n    {\r\n        id: 'bnez',\r\n        assemblyName: 'bnez',\r\n        name: 'Branch on not equal to Zero',\r\n        description: 'Branch if a register is not equal to zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bne $s, $0, C'\r\n            ]\r\n        },\r\n        usage: 'bnez $s, label',\r\n        result: 'if (s != 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'blt',\r\n        assemblyName: 'blt',\r\n        name: 'Branch Less Than',\r\n        description: 'Branch if a register is less than another register',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'slt $at, $s, $t',\r\n                'bne $at, $0, label'\r\n            ]\r\n        },\r\n        usage: 'blt $s, $t, label',\r\n        result: 'if (s < t) PC = label;'\r\n    },\r\n    {\r\n        id: 'bltz',\r\n        assemblyName: 'bltz',\r\n        name: 'Branch on Less than Zero',\r\n        description: 'Branch if a register is less than zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'RI-Type',\r\n            opcode: '000001',\r\n            rs: 'sssss',\r\n            regimm: '00000',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bltz $s, label',\r\n        result: 'if (s < 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'bltzal',\r\n        assemblyName: 'bltzal',\r\n        name: 'Branch on Less than Zero and Link',\r\n        description: 'Branch if a register is less zero and link',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'RI-Type',\r\n            opcode: '000001',\r\n            rs: 'sssss',\r\n            regimm: '10000',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bltzal $s, label',\r\n        result: 'if (s < 0) {RA = PC + 4; PC = label;}'\r\n    },\r\n    {\r\n        id: 'ble',\r\n        assemblyName: 'ble',\r\n        name: 'Branch Less Than or Equal',\r\n        description: 'Branch if a register is less than or equal to another register',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'slt $at, $t, $s',\r\n                'beq $at, $0, label'\r\n            ]\r\n        },\r\n        usage: 'ble $s, $t, label',\r\n        result: 'if (s <= t) PC = label;'\r\n    },\r\n    {\r\n        id: 'blez',\r\n        assemblyName: 'blez',\r\n        name: 'Branch on Less than or Equal to Zero',\r\n        description: 'Branch if a register is less than or equal to zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '000110',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'blez $s, label',\r\n        result: 'if (s <= 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'bgt',\r\n        assemblyName: 'bgt',\r\n        name: 'Branch Greater Than',\r\n        description: 'Branch if a register is greater than another register',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'slt $at, $t, $s',\r\n                'bne $at, $0, label'\r\n            ]\r\n        },\r\n        usage: 'bgt $s, $t, label',\r\n        result: 'if (s > t) PC = label;'\r\n    },\r\n    {\r\n        id: 'bgtz',\r\n        assemblyName: 'bgtz',\r\n        name: 'Branch on Greater than Zero',\r\n        description: 'Branch if a register is greater than zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '000111',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bgtz $s, label',\r\n        result: 'if (s > 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'bgezal',\r\n        assemblyName: 'bgezal',\r\n        name: 'Branch on Greater than or Equal to Zero and Link',\r\n        description: 'Branch if a register is greater than or equal to zero and link',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'RI-Type',\r\n            opcode: '000001',\r\n            rs: 'sssss',\r\n            regimm: '10001',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bgezal $s, label',\r\n        result: 'if (s >= 0) {RA = PC + 4; PC = label;}'\r\n    },\r\n    {\r\n        id: 'bge',\r\n        assemblyName: 'bge',\r\n        name: 'Branch Greater Than or Equal',\r\n        description: 'Branch if a register is greater than or equal to another register',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'slt $at, $s, $t',\r\n                'beq $at, $0, label'\r\n            ]\r\n        },\r\n        usage: 'bge $s, $t, label',\r\n        result: 'if (s >= t) PC = label;'\r\n    },\r\n    {\r\n        id: 'bgez',\r\n        assemblyName: 'bgez',\r\n        name: 'Branch on Greater than or Equal to Zero',\r\n        description: 'Branch if a register is  greater than or equal to zero',\r\n        category: instructionCategory.BRANCH,\r\n        instructionEncoding: {\r\n            type: 'RI-Type',\r\n            opcode: '000001',\r\n            rs: 'sssss',\r\n            regimm: '00001',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bgez $s, label',\r\n        result: 'if (s >= 0) PC = label;'\r\n    },\r\n    {\r\n        id: 'and',\r\n        assemblyName: 'and',\r\n        name: 'Bitwise And',\r\n        description: 'Bitwise and two registers',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '00000',\r\n            funct: '100100'\r\n        },\r\n        usage: 'and $d, $s, $t',\r\n        result: 'd = s & t'\r\n    },\r\n    {\r\n        id: 'andi',\r\n        assemblyName: 'andi',\r\n        name: 'Bitwise And Immediate',\r\n        description: 'Bitwise and a register and an immediate',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'andi $t, $s, imm',\r\n        result: 't = s & imm'\r\n    },\r\n    {\r\n        id: 'or',\r\n        assemblyName: 'or',\r\n        name: 'Bitwise Or',\r\n        description: 'Bitwise or two registers',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '00000',\r\n            funct: '100101'\r\n        },\r\n        usage: 'or $d, $s, $t',\r\n        result: 'd = s | t'\r\n    },\r\n    {\r\n        id: 'ori',\r\n        assemblyName: 'ori',\r\n        name: 'Bitwise Or Immediate',\r\n        description: 'Bitwise or a register and an immediate',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001101',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'ori $t, $s, imm',\r\n        result: 't = s | imm'\r\n    },\r\n    {\r\n        id: 'xor',\r\n        assemblyName: 'xor',\r\n        name: 'Bitwise Exclusive Or',\r\n        description: 'Bitwise exclusive or two registers',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '00000',\r\n            funct: '100110'\r\n        },\r\n        usage: 'xor $d, $s, $t',\r\n        result: 'd = s ^ t'\r\n    },\r\n    {\r\n        id: 'xori',\r\n        assemblyName: 'xori',\r\n        name: 'Bitwise Exclusive Or Immediate',\r\n        description: 'Bitwise exclusive or a register and an immediate',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001110',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'xori $t, $s, imm',\r\n        result: 't = s ^ imm'\r\n    },\r\n    {\r\n        id: 'nor',\r\n        assemblyName: 'nor',\r\n        name: 'Bitwise Nor',\r\n        description: 'Bitwise nor two registers',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '00000',\r\n            funct: '100111‬'\r\n        },\r\n        usage: 'nor $d, $s, $t',\r\n        result: 'd = ~(s | t)'\r\n    },\r\n    {\r\n        id: 'not',\r\n        assemblyName: 'not',\r\n        name: 'Bitwise Not',\r\n        description: 'Bitwise not a register',\r\n        category: instructionCategory.LOGICAL,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'nor $s, $t, $0'\r\n            ]\r\n        },\r\n        usage: 'not $s, $t',\r\n        result: 's = ~(t)'\r\n    },\r\n    {\r\n        id: 'j',\r\n        assemblyName: 'j',\r\n        name: 'Jump',\r\n        description: 'Jump to a specified label',\r\n        category: instructionCategory.JUMP,\r\n        instructionEncoding: {\r\n            type: 'J-Type',\r\n            opcode: '000010',\r\n            addr: 'aaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n        },\r\n        usage: 'j label',\r\n        result: 'PC = label;'\r\n    },\r\n    {\r\n        id: 'jal',\r\n        assemblyName: 'jal',\r\n        name: 'Jump and Link',\r\n        description: 'Jump to a specified label and link',\r\n        category: instructionCategory.JUMP,\r\n        instructionEncoding: {\r\n            type: 'J-Type',\r\n            opcode: '000011',\r\n            addr: 'aaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n        },\r\n        usage: 'jal label',\r\n        result: '$ra = PC + 4; PC = label;'\r\n    },\r\n    {\r\n        id: 'jr',\r\n        assemblyName: 'jr',\r\n        name: 'Jump Register',\r\n        description: 'Jump to the address in a register',\r\n        category: instructionCategory.JUMP,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            rd: '-----',\r\n            shamt: '-----',\r\n            funct: '001000'\r\n        },\r\n        usage: 'jr $s',\r\n        result: 'PC = s;'\r\n    },\r\n    {\r\n        id: 'jalr',\r\n        assemblyName: 'jalr',\r\n        name: 'Jump Register and Link',\r\n        description: 'Jump to the address in a register and link',\r\n        category: instructionCategory.JUMP,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: '-----',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '001001'\r\n        },\r\n        usage: 'jalr $d, $s',\r\n        result: 'd = PC + 4; PC = s;'\r\n    },\r\n    {\r\n        id: 'jalr-implied',\r\n        assemblyName: 'jalr',\r\n        name: 'Jump Register and Link (link register implied)',\r\n        description: 'Jump to the address in a register and link (link register implied)',\r\n        category: instructionCategory.JUMP,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'jalr $ra, $s'\r\n            ]\r\n        },\r\n        usage: 'jalr $s',\r\n        result: '$ra = PC + 4; PC = s;'\r\n    },\r\n    {\r\n        id: 'lb',\r\n        assemblyName: 'lb',\r\n        name: 'Load Byte',\r\n        description: 'Load a (sign-extended) byte from memory to a register',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '100000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lb $t, imm($s)',\r\n        result: 't = memory[s + imm]'\r\n    },\r\n    {\r\n        id: 'lbu',\r\n        assemblyName: 'lbu',\r\n        name: 'Load Byte Unsigned',\r\n        description: 'Load a (zero-padded) byte from memory to a register',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '100100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lbu $t, imm($s)',\r\n        result: 't = memory[s + imm]'\r\n    },\r\n    {\r\n        id: 'lh',\r\n        assemblyName: 'lh',\r\n        name: 'Load Half Word',\r\n        description: 'Load a (sign-extended) half word from memory to a register',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '100001',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lh $t, imm($s)',\r\n        result: 't = memory[s + imm]'\r\n    },\r\n    {\r\n        id: 'lhu',\r\n        assemblyName: 'lhu',\r\n        name: 'Load Half Word Unsigned',\r\n        description: 'Load a (zero-padded) half word from memory to a register',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '100101',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lhu $t, imm($s)',\r\n        result: 't = memory[s + imm]'\r\n    },\r\n    {\r\n        id: 'lw',\r\n        assemblyName: 'lw',\r\n        name: 'Load Word',\r\n        description: 'Load a word from memory to a register',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '100011',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lw $t, imm($s)',\r\n        result: 't = memory[s + imm]',\r\n        notes: 'Getting an unaligned address error with load word? The address must be aligned with a word boundary (i.e. it must be a multiple of 4). Double check the math you used to calculate the address, and check if you need to add a .align directive in your .data section.'\r\n    },\r\n    {\r\n        id: 'lw-label',\r\n        assemblyName: 'lw',\r\n        name: 'Load Word Label',\r\n        description: 'Load a word from memory to a register by label',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'lw $t, 0($at)'\r\n            ]\r\n        },\r\n        usage: 'lw $t, label',\r\n        result: 't = memory[label]',\r\n        notes: 'Getting an unaligned address error with load word? The address must be aligned with a word boundary (i.e. it must be a multiple of 4). Check if you need to add a .align directive in your .data section.'\r\n    },\r\n    {\r\n        id: 'sb',\r\n        assemblyName: 'sb',\r\n        name: 'Store Byte',\r\n        description: 'Store a byte from a register to memory',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '101000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'sb $t, imm($s)',\r\n        result: 'memory[s + imm] = t'\r\n    },\r\n    {\r\n        id: 'sh',\r\n        assemblyName: 'sh',\r\n        name: 'Store Half Word',\r\n        description: 'Store a half word from a register to memory',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '101000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'sh $t, imm($s)',\r\n        result: 'memory[s + imm] = t'\r\n    },\r\n    {\r\n        id: 'sw',\r\n        assemblyName: 'sw',\r\n        name: 'Store Word',\r\n        description: 'Store a word from a register to memory',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '101011',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'sw $t, imm($s)',\r\n        result: 'memory[s + imm] = t',\r\n        notes: 'Getting an unaligned address error with store word? The address must be aligned with a word boundary (i.e. it must be a multiple of 4). Double check the math you used to calculate the address, and check if you need to add a .align directive in your .data section.'\r\n    },\r\n    {\r\n        id: 'sw-label',\r\n        assemblyName: 'sw',\r\n        name: 'Store Word Label',\r\n        description: 'Store a word from a register to memory by label',\r\n        category: instructionCategory.MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'sw $t, 0($at)'\r\n            ]\r\n        },\r\n        usage: 'sw $t, label',\r\n        result: 'memory[label] = t',\r\n        notes: 'Getting an unaligned address error with store word? The address must be aligned with a word boundary (i.e. it must be a multiple of 4). Check if you need to add a .align directive in your .data section.'\r\n    },\r\n    {\r\n        id: 'seq',\r\n        assemblyName: 'seq',\r\n        name: 'Set on Equal',\r\n        description: 'Check is a register is equal to than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'beq $s, $t, 8',\r\n                'ori $d, $0, 0',\r\n                'beq $0, $0, 4',\r\n                'ori $d, $0, 1'\r\n            ]\r\n        },\r\n        usage: 'seq $d, $s, $t',\r\n        result: 'd = s == t'\r\n    },\r\n    {\r\n        id: 'sne',\r\n        assemblyName: 'sne',\r\n        name: 'Set on Not Equal',\r\n        description: 'Check is a register is not equal to than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'beq $s, $t, 8',\r\n                'ori $d, $0, 1',\r\n                'beq $0, $0, 4',\r\n                'ori $d, $0, 0'\r\n            ]\r\n        },\r\n        usage: 'sne $d, $s, $t',\r\n        result: 'd = s != t'\r\n    },\r\n    {\r\n        id: 'slt',\r\n        assemblyName: 'slt',\r\n        name: 'Set on Less Than',\r\n        description: 'Check is a register is less than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '101010'\r\n        },\r\n        usage: 'slt $d, $s, $t',\r\n        result: 'd = s < t'\r\n    },\r\n    {\r\n        id: 'sltu',\r\n        assemblyName: 'sltu',\r\n        name: 'Set on Less Than Unsigned',\r\n        description: 'Check is a register is less than another register (unsigned)',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '101011'\r\n        },\r\n        usage: 'sltu $d, $s, $t',\r\n        result: 'd = s < t'\r\n    },\r\n    {\r\n        id: 'slti',\r\n        assemblyName: 'slti',\r\n        name: 'Set on Less Than Immediate',\r\n        description: 'Check is a register is less than an immediate',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001010',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'slti $s, $t, imm',\r\n        result: 's = t < imm'\r\n    },\r\n    {\r\n        id: 'sltiu',\r\n        assemblyName: 'sltiu',\r\n        name: 'Set on Less Than Immediate Unsigned',\r\n        description: 'Check is a register is less than an immediate (unsigned)',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '001011',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'sltiu $s, $t, imm',\r\n        result: 's = t < imm'\r\n    },\r\n    {\r\n        id: 'sle',\r\n        assemblyName: 'sle',\r\n        name: 'Set on Less Than or Equal',\r\n        description: 'Check is a register is less than or equal to than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bne $s, $t, 8',\r\n                'ori $d, $0, 1',\r\n                'beq $0, $0, 4',\r\n                'slt $d, $s, $t'\r\n            ]\r\n        },\r\n        usage: 'sle $d, $s, $t',\r\n        result: 'd = s <= t'\r\n    },\r\n    {\r\n        id: 'sleu',\r\n        assemblyName: 'sleu',\r\n        name: 'Set on Less Than or Equal Unsigned',\r\n        description: 'Check is a register is less than or equal to than another register (unsigned)',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bne $s, $t, 8',\r\n                'ori $d, $0, 1',\r\n                'beq $0, $0, 4',\r\n                'sltu $d, $s, $t'\r\n            ]\r\n        },\r\n        usage: 'sleu $d, $s, $t',\r\n        result: 'd = s <= t'\r\n    },\r\n    {\r\n        id: 'sgt',\r\n        assemblyName: 'sgt',\r\n        name: 'Set on Greater Than',\r\n        description: 'Check is a register is greater than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'slt $d, $t, $s'\r\n            ]\r\n        },\r\n        usage: 'sgt $d, $s, $t',\r\n        result: 'd = s > t'\r\n    },\r\n    {\r\n        id: 'sgtu',\r\n        assemblyName: 'sgtu',\r\n        name: 'Set on Greater Than Unsigned',\r\n        description: 'Check is a register is greater than another register (unsigned)',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'sltu $d, $t, $s'\r\n            ]\r\n        },\r\n        usage: 'sgtu $d, $s, $t',\r\n        result: 'd = s > t'\r\n    },\r\n    {\r\n        id: 'sge',\r\n        assemblyName: 'sge',\r\n        name: 'Set on Greater Than or Equal',\r\n        description: 'Check is a register is greater than or equal to than another register',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bne $s, $t, 8',\r\n                'ori $d, $0, 1',\r\n                'beq $0, $0, 4',\r\n                'slt $d, $t, $s'\r\n            ]\r\n        },\r\n        usage: 'sge $d, $s, $t',\r\n        result: 'd = s >= t'\r\n    },\r\n    {\r\n        id: 'sgeu',\r\n        assemblyName: 'sgeu',\r\n        name: 'Set on Greater Than or Equal Unsigned',\r\n        description: 'Check is a register is greater than or equal to than another register (unsigned)',\r\n        category: instructionCategory.COMPARISON,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'bne $s, $t, 8',\r\n                'ori $d, $0, 1',\r\n                'beq $0, $0, 4',\r\n                'sltu $d, $t, $s'\r\n            ]\r\n        },\r\n        usage: 'sgeu $d, $s, $t',\r\n        result: 'd = s >= t'\r\n    },\r\n    {\r\n        id: 'sllv',\r\n        assemblyName: 'sllv',\r\n        name: 'Shift Left Logical',\r\n        description: 'Shift the contents of a register left by an amount from a register',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '000100'\r\n        },\r\n        usage: 'sllv $d, $t, $s',\r\n        result: 'd = t << s',\r\n        notes: \"Only the least significant 5 bits of $s are used.\"\r\n    },\r\n    {\r\n        id: 'sll',\r\n        assemblyName: 'sll',\r\n        name: 'Shift Left Logical Immediate',\r\n        description: 'Shift the contents of a register left by an immediate amount',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: 'iiiii',\r\n            funct: '000000'\r\n        },\r\n        usage: 'sll $d, $t, imm',\r\n        result: 'd = t << imm'\r\n    },\r\n    {\r\n        id: 'srlv',\r\n        assemblyName: 'srlv',\r\n        name: 'Shift Right Logical',\r\n        description: 'Shift the contents of a register right by an amount from a register (zero-padded)',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '000110'\r\n        },\r\n        usage: 'srlv $d, $t, $s',\r\n        result: 'd = t >> s',\r\n        notes: \"Only the least significant 5 bits of $s are used.\"\r\n    },\r\n    {\r\n        id: 'srl',\r\n        assemblyName: 'srl',\r\n        name: 'Shift Right Logical Immediate',\r\n        description: 'Shift the contents of a register right by an immediate amount (zero-padded)',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: 'iiiii',\r\n            funct: '000010'\r\n        },\r\n        usage: 'srl $d, $t, imm',\r\n        result: 'd = t >> imm'\r\n    },\r\n    {\r\n        id: 'srav',\r\n        assemblyName: 'srav',\r\n        name: 'Shift Right Arithmetic',\r\n        description: 'Shift the contents of a register right by an amount from a register (sign-extended)',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: '-----',\r\n            funct: '000111'\r\n        },\r\n        usage: 'srav $d, $t, $s',\r\n        result: 'd = t >> s',\r\n        notes: \"Only the least significant 5 bits of $s are used.\"\r\n    },\r\n    {\r\n        id: 'sra',\r\n        assemblyName: 'sra',\r\n        name: 'Shift Right Arithmetic Immediate',\r\n        description: 'Shift the contents of a register right by the specified number of places (sign-extended)',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: '-----',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: 'iiiii',\r\n            funct: '000011'\r\n        },\r\n        usage: 'sra $d, $t, imm',\r\n        result: 'd = t >> imm'\r\n    },\r\n    {\r\n        id: 'rol',\r\n        assemblyName: 'rol',\r\n        name: 'Rotate Left',\r\n        description: 'Rotate the contents of a register left by an amount from a register',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'subu $at, $0, $s',\r\n                'srlv $at, $t, $at',\r\n                'sllv $d, $s, $t',\r\n                'or $d, $d, $at'\r\n            ]\r\n        },\r\n        usage: 'rol $d, $t, $s',\r\n        result: 'd = rotateLeft(t, s)',\r\n        notes: \"Only the least significant 5 bits of $s are used.\",\r\n        tags: 'circular shift'\r\n    },\r\n    {\r\n        id: 'ror',\r\n        assemblyName: 'ror',\r\n        name: 'Rotate Right',\r\n        description: 'Rotate the contents of a register right by an amount from a register',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'subu $at, $0, $s',\r\n                'sllv $at, $t, $at',\r\n                'srlv $d, $s, $t',\r\n                'or $d, $d, $at'\r\n            ]\r\n        },\r\n        usage: 'rol $d, $t, $s',\r\n        result: 'd = rotateRight(t, s)',\r\n        notes: \"Only the least significant 5 bits of $s are used.\",\r\n        tags: 'circular shift'\r\n    },\r\n    {\r\n        id: 'roli',\r\n        assemblyName: 'rol',\r\n        name: 'Rotate Left Immediate',\r\n        description: 'Rotate the contents of a register left by the specified number of places',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'srl $at, $t, (32 - imm)',\r\n                'sll $d, $t, imm',\r\n                'or $d, $d, $at'\r\n            ]\r\n        },\r\n        usage: 'rol $d, $t, imm',\r\n        result: 'd = rotateLeft(t, imm)',\r\n        tags: 'circular shift'\r\n    },\r\n    {\r\n        id: 'rori',\r\n        assemblyName: 'ror',\r\n        name: 'Rotate Right Immediate',\r\n        description: 'Rotate the contents of a register right by the specified number of places',\r\n        category: instructionCategory.SHIFT,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'sll $at, $t, (32 - imm)',\r\n                'srl $d, $t, imm',\r\n                'or $d, $d, $at'\r\n            ]\r\n        },\r\n        usage: 'rol $d, $t, imm',\r\n        result: 'd = rotateRight(t, imm)',\r\n        tags: 'circular shift'\r\n    },\r\n    {\r\n        id: 'mtc1',\r\n        assemblyName: 'mtc1',\r\n        name: 'Move to Coprocessor 1',\r\n        description: 'Move a value from a general-purpose register to a floating point register',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'COP-Type',\r\n            opcode: '‭010001',\r\n            funct: '00100',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            addr: '-----------'\r\n        },\r\n        usage: 'mtc1 $t, $d',\r\n        result: 'd = t',\r\n        notes: 'The first argument is the register from the main processor, the second is the register from the coprocessor. Unlike most MIPS instructions, the destination of the operation is not listed first.'\r\n    },\r\n    {\r\n        id: 'mfc1',\r\n        assemblyName: 'mfc1',\r\n        name: 'Move from Coprocessor 1',\r\n        description: 'Move a value from a floating point register to a general-purpose register',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'COP-Type',\r\n            opcode: '‭010001',\r\n            funct: '00000',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            addr: '-----------'\r\n        },\r\n        usage: 'mtc1 $t, $d',\r\n        result: 't = d',\r\n        notes: 'The first argument is the register from the main processor, the second is the register from the coprocessor.'\r\n    },\r\n    {\r\n        id: 'mov-s',\r\n        assemblyName: 'mov.s',\r\n        name: 'Floating Point Move Single',\r\n        description: 'Move a single-precision float to another register',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000110'\r\n        },\r\n        usage: 'mov.s $d, $s',\r\n        result: 'd = s',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'mov-d',\r\n        assemblyName: 'mov.d',\r\n        name: 'Floating Point Move Double',\r\n        description: 'Move a double-precision float to another register',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000110'\r\n        },\r\n        usage: 'mov.d $d, $s',\r\n        result: 'd = s',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'movz-s',\r\n        assemblyName: 'movz.s',\r\n        name: 'Floating Point Move on Zero Single',\r\n        description: 'Move a single-precision float if another register is zero',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭010000',\r\n            ft : 'ttttt',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭010010'\r\n        },\r\n        usage: 'movz.s $d, $s, $t',\r\n        result: 'if (t == 0) d = s;',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'movz-d',\r\n        assemblyName: 'movz.d',\r\n        name: 'Floating Point Move on Zero Double',\r\n        description: 'Move a double-precision float if another register is zero',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭010001',\r\n            ft : 'ttttt',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭010010‬'\r\n        },\r\n        usage: 'movz.d $d, $s, $t',\r\n        result: 'if (t == 0) d = s;',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'movn-s',\r\n        assemblyName: 'movn.s',\r\n        name: 'Floating Point Move on Not Zero Single',\r\n        description: 'Move a single-precision float if another register is not zero',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭010000',\r\n            ft : 'ttttt',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭010011‬'\r\n        },\r\n        usage: 'movn.s $d, $s, $t',\r\n        result: 'if (t != 0) d = s;',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'movn-d',\r\n        assemblyName: 'movn.d',\r\n        name: 'Floating Point Move on Not Zero Double',\r\n        description: 'Move a double-precision float if another register is not zero',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭010001',\r\n            ft : 'ttttt',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭010011‬'\r\n        },\r\n        usage: 'movn.d $d, $s, $t',\r\n        result: 'if (t != 0) d = s;',\r\n        tags: 'copy'\r\n    },\r\n    {\r\n        id: 'cvt-s-w',\r\n        assemblyName: 'cvt.s.w',\r\n        name: 'Convert Word to Single',\r\n        description: 'Convert an integer to a single-precision float',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10100',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100000‬'\r\n        },\r\n        usage: 'cvt.s.w $d, $s',\r\n        result: 'd = (float) s'\r\n    },\r\n    {\r\n        id: 'cvt-d-w',\r\n        assemblyName: 'cvt.d.w',\r\n        name: 'Convert Word to Double',\r\n        description: 'Convert an integer to a double-precision float',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100001‬'\r\n        },\r\n        usage: 'cvt.d.w $d, $s',\r\n        result: 'd = (double) s'\r\n    },\r\n    {\r\n        id: 'cvt-w-s',\r\n        assemblyName: 'cvt.w.s',\r\n        name: 'Convert Single to Word',\r\n        description: 'Convert a single-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100100‬'\r\n        },\r\n        usage: 'cvt.w.s $d, $s',\r\n        result: 'd = (int) s'\r\n    },\r\n    {\r\n        id: 'cvt-d-s',\r\n        assemblyName: 'cvt.d.s',\r\n        name: 'Convert Single to Double',\r\n        description: 'Convert a single-precision float to a double-precision float',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100001‬'\r\n        },\r\n        usage: 'cvt.d.s $d, $s',\r\n        result: 'd = (double) s'\r\n    },\r\n    {\r\n        id: 'cvt-w-d',\r\n        assemblyName: 'cvt.w.d',\r\n        name: 'Convert Double to Word',\r\n        description: 'Convert a double-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100100‬'\r\n        },\r\n        usage: 'cvt.w.d $d, $s',\r\n        result: 'd = (int) s'\r\n    },\r\n    {\r\n        id: 'cvt-s-d',\r\n        assemblyName: 'cvt.s.d',\r\n        name: 'Convert Double to Single',\r\n        description: 'Convert a double-precision float to a single-precision float',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '100000‬'\r\n        },\r\n        usage: 'cvt.s.d $d, $s',\r\n        result: 'd = (float) s'\r\n    },\r\n    {\r\n        id: 'round-w-s',\r\n        assemblyName: 'round.w.s',\r\n        name: 'Floating Point Round to Word Single',\r\n        description: 'Round a single-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭001100‬'\r\n        },\r\n        usage: 'round.w.s $d, $s',\r\n        result: 'd = round(s)'\r\n    },\r\n    {\r\n        id: 'round-w-d',\r\n        assemblyName: 'round.w.d',\r\n        name: 'Floating Point Round to Word Double',\r\n        description: 'Round a double-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭001100‬'\r\n        },\r\n        usage: 'round.w.d $d, $s',\r\n        result: 'd = round(s)'\r\n    },\r\n    {\r\n        id: 'trunc-w-s',\r\n        assemblyName: 'trunc.w.s',\r\n        name: 'Floating Point Truncate to Word Single',\r\n        description: 'Truncate a single-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭001101‬'\r\n        },\r\n        usage: 'trunc.w.s $d, $s',\r\n        result: 'd = trunc(s)'\r\n    },\r\n    {\r\n        id: 'trunc-w-d',\r\n        assemblyName: 'trunc.w.d',\r\n        name: 'Floating Point Truncate to Word Double',\r\n        description: 'Truncate a double-precision float to an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '‭001101‬'\r\n        },\r\n        usage: 'trunc.w.d $d, $s',\r\n        result: 'd = trunc(s)'\r\n    },\r\n    {\r\n        id: 'ceil-w-s',\r\n        assemblyName: 'ceil.w.s',\r\n        name: 'Floating Point Ceiling to Word Single',\r\n        description: 'Calculate the ceiling of a single-precision float as an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '00‭1110‬'\r\n        },\r\n        usage: 'ceil.w.s $d, $s',\r\n        result: 'd = ⌈s⌉'\r\n    },\r\n    {\r\n        id: 'ceil-w-d',\r\n        assemblyName: 'ceil.w.d',\r\n        name: 'Floating Point Ceiling to Word Double',\r\n        description: 'Calculate the ceiling of a double-precision float as an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '00‭1110‬'\r\n        },\r\n        usage: 'ceil.w.d $d, $s',\r\n        result: 'd = ⌈s⌉'\r\n    },\r\n    {\r\n        id: 'floor-w-s',\r\n        assemblyName: 'floor.w.s',\r\n        name: 'Floating Point Floor to Word Single',\r\n        description: 'Calculate the floor of a single-precision float as an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '00‭1111'\r\n        },\r\n        usage: 'floor.w.s $d, $s',\r\n        result: 'd = ⌊s⌋'\r\n    },\r\n    {\r\n        id: 'floor-w-d',\r\n        assemblyName: 'floor.w.d',\r\n        name: 'Floating Point Floor to Word Double',\r\n        description: 'Calculate the floor of a double-precision float as an integer',\r\n        category: instructionCategory.FLOAT_MOVE_AND_CONVERT,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '00‭1111‬'\r\n        },\r\n        usage: 'floor.w.d $d, $s',\r\n        result: 'd = ⌊s⌋'\r\n    },\r\n    {\r\n        id: 'add-s',\r\n        assemblyName: 'add.s',\r\n        name: 'Floating Point Addition Single',\r\n        description: 'Calculate the sum of two single-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000000'\r\n        },\r\n        usage: 'add.s $d, $s, $t',\r\n        result: 'd = s + t',\r\n        tags: 'add addition plus'\r\n    },\r\n    {\r\n        id: 'add-d',\r\n        assemblyName: 'add.d',\r\n        name: 'Floating Point Addition Double',\r\n        description: 'Calculate the sum of two double-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000000'\r\n        },\r\n        usage: 'add.d $d, $s, $t',\r\n        result: 'd = s + t',\r\n        tags: 'addition plus'\r\n    },\r\n    {\r\n        id: 'sub-s',\r\n        assemblyName: 'sub.s',\r\n        name: 'Floating Point Subtraction Single',\r\n        description: 'Calculate the difference of two single-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000001'\r\n        },\r\n        usage: 'sub.s $d, $s, $t',\r\n        result: 'd = s - t',\r\n        tags: 'subtraction minus'\r\n    },\r\n    {\r\n        id: 'sub-d',\r\n        assemblyName: 'sub.d',\r\n        name: 'Floating Point Subtraction Double',\r\n        description: 'Calculate the difference of two double-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000001'\r\n        },\r\n        usage: 'sub.d $d, $s, $t',\r\n        result: 'd = s - t',\r\n        tags: 'subtraction minus'\r\n    },\r\n    {\r\n        id: 'mul-s',\r\n        assemblyName: 'mul.s',\r\n        name: 'Floating Point Multiplication Single',\r\n        description: 'Calculate the product of two single-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10000',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000010'\r\n        },\r\n        usage: 'mul.s $d, $s, $t',\r\n        result: 'd = s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'mul-d',\r\n        assemblyName: 'mul.d',\r\n        name: 'Floating Point Multiplication Double',\r\n        description: 'Calculate the product of two double-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10001',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000010'\r\n        },\r\n        usage: 'mul.d $d, $s, $t',\r\n        result: 'd = s * t',\r\n        tags: 'multiply multiplication times'\r\n    },\r\n    {\r\n        id: 'div-s',\r\n        assemblyName: 'div.s',\r\n        name: 'Floating Point Division Single',\r\n        description: 'Calculate the quotient of two single-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10000',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000011'\r\n        },\r\n        usage: 'div.s $d, $s, $t',\r\n        result: 'd = s / t',\r\n        tags: 'divide division'\r\n    },\r\n    {\r\n        id: 'div-d',\r\n        assemblyName: 'div.d',\r\n        name: 'Floating Point Division Double',\r\n        description: 'Calculate the quotient of two double-precision floats',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000011'\r\n        },\r\n        usage: 'div.d $d, $s, $t',\r\n        result: 'd = s / t',\r\n        tags: 'divide division'\r\n    },\r\n    {\r\n        id: 'sqrt-s',\r\n        assemblyName: 'sqrt.s',\r\n        name: 'Floating Point Square Root Single',\r\n        description: 'Calculate the square root of a single-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10000',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000100'\r\n        },\r\n        usage: 'sqrt.s $d, $s',\r\n        result: 'd = sqrt(s)'\r\n    },\r\n    {\r\n        id: 'sqrt-d',\r\n        assemblyName: 'sqrt.d',\r\n        name: 'Floating Point Square Root Double',\r\n        description: 'Calculate the square root of a double-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10001',\r\n            ft : 'sssss',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000100'\r\n        },\r\n        usage: 'sqrt.d $d, $s',\r\n        result: 'd = sqrt(s)'\r\n    },\r\n    {\r\n        id: 'abs-s',\r\n        assemblyName: 'abs.s',\r\n        name: 'Floating Point Absolute Value Single',\r\n        description: 'Calculate the absolute value of a single-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000101'\r\n        },\r\n        usage: 'abs.s $d, $s',\r\n        result: 'd = |s|'\r\n    },\r\n    {\r\n        id: 'abs-d',\r\n        assemblyName: 'abs.d',\r\n        name: 'Floating Point Absolute Value Double',\r\n        description: 'Calculate the absolute value of a double-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000101'\r\n        },\r\n        usage: 'abs.d $d, $s',\r\n        result: 'd = |s|'\r\n    },\r\n    {\r\n        id: 'neg-s',\r\n        assemblyName: 'neg.s',\r\n        name: 'Floating Point Negation Single',\r\n        description: 'Calculate the negation of a single-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00000',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000111'\r\n        },\r\n        usage: 'neg.s $d, $s',\r\n        result: 'd = -s'\r\n    },\r\n    {\r\n        id: 'neg-d',\r\n        assemblyName: 'neg.d',\r\n        name: 'Floating Point Negation Double',\r\n        description: 'Calculate the negation of a double-precision float',\r\n        category: instructionCategory.FLOAT_ARITHMETIC,\r\n        instructionEncoding: {\r\n            type: 'F-Type',\r\n            opcode: '‭010001',\r\n            format: '00001',\r\n            ft : '-----',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '000111'\r\n        },\r\n        usage: 'neg.d $d, $s',\r\n        result: 'd = -s'\r\n    },\r\n    {\r\n        id: 'c-eq-s',\r\n        assemblyName: 'c.eq.s',\r\n        name: 'Floating Point Compare Equal Single',\r\n        description: 'Check if two single-precision floats are equal',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '0010',\r\n        },\r\n        usage: 'c.eq.s cc, $s, $t',\r\n        result: 'conditional cc = s == t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'c-eq-d',\r\n        assemblyName: 'c.eq.d',\r\n        name: 'Floating Point Compare Equal Double',\r\n        description: 'Check if two double-precision floats are equal',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '0010',\r\n        },\r\n        usage: 'c.eq.d cc, $s, $t',\r\n        result: 'conditional cc = s == t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'c-le-s',\r\n        assemblyName: 'c.le.s',\r\n        name: 'Floating Point Compare Less Than or Equal Single',\r\n        description: 'Check if a single-precision float is less than or equal to another single',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '1110‬',\r\n        },\r\n        usage: 'c.le.s cc, $s, $t',\r\n        result: 'conditional cc = s <= t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'c-le-d',\r\n        assemblyName: 'c.le.d',\r\n        name: 'Floating Point Compare Less Than or Equal Double',\r\n        description: 'Check if a double-precision float is less than or equal to another double',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '1110‬',\r\n        },\r\n        usage: 'c.le.d cc, $s, $t',\r\n        result: 'conditional cc = s <= t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'c-lt-s',\r\n        assemblyName: 'c.lt.s',\r\n        name: 'Floating Point Compare Less Than Single',\r\n        description: 'Check if a single-precision float is less than another single',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '1100‬',\r\n        },\r\n        usage: 'c.lt.s cc, $s, $t',\r\n        result: 'conditional cc = s < t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'c-lt-d',\r\n        assemblyName: 'c.lt.d',\r\n        name: 'Floating Point Compare Less Than Double',\r\n        description: 'Check if a double-precision float is less than another double',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            ft: 'ttttt',\r\n            fs : 'sssss',\r\n            cc: 'ccc',\r\n            cond: '--',\r\n            fc: '11',\r\n            funct: '1100‬',\r\n        },\r\n        usage: 'c.lt.d cc, $s, $t',\r\n        result: 'conditional cc = s < t',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to store the result in. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'bc1f',\r\n        assemblyName: 'bc1f',\r\n        name: 'Branch on Conditional False',\r\n        description: 'Branch if a floating point conditional is false',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'IC-Type',\r\n            opcode: '‭010001',\r\n            format: '‭01000',\r\n            cc: 'ccc',\r\n            cond: '00',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bc1f cc label',\r\n        result: 'if (!conditional cc) PC = label;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'bc1t',\r\n        assemblyName: 'bc1t',\r\n        name: 'Branch on Conditional True',\r\n        description: 'Branch if a floating point conditional is true',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'IC-Type',\r\n            opcode: '‭010001',\r\n            format: '‭01000',\r\n            cc: 'ccc',\r\n            cond: '01',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'bc1t cc label',\r\n        result: 'if (conditional cc) PC = label;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'movf-s',\r\n        assemblyName: 'movf.s',\r\n        name: 'Floating Point Move on Conditional False Single',\r\n        description: 'Move a single-precision float to another register if a conditional is false',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCO-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            cc: 'ccc',\r\n            cond: '00',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '010001'\r\n        },\r\n        usage: 'movf.s $fd, $fs, cc',\r\n        result: 'if (!conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'movf-d',\r\n        assemblyName: 'movf.d',\r\n        name: 'Floating Point Move on Conditional False Double',\r\n        description: 'Move a double-precision float to another register if a conditional is false',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCO-Type',\r\n            opcode: '‭010001',\r\n            format: '‭10001',\r\n            cc: 'ccc',\r\n            cond: '00',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '010001'\r\n        },\r\n        usage: 'movf.s $fd, $fs, cc',\r\n        result: 'if (!conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'movt-s',\r\n        assemblyName: 'movt.s',\r\n        name: 'Floating Point Move on Conditional True Single',\r\n        description: 'Move a single-precision float to another register if a conditional is true',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCO-Type',\r\n            opcode: '‭010001',\r\n            format: '10000',\r\n            cc: 'ccc',\r\n            cond: '01',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '010001'\r\n        },\r\n        usage: 'movt.s $fd, $fs, cc',\r\n        result: 'if (conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'movt-d',\r\n        assemblyName: 'movt.d',\r\n        name: 'Floating Point Move on Conditional True Double',\r\n        description: 'Move a double-precision float to another register if a conditional is true',\r\n        category: instructionCategory.FLOAT_CONDITIONAL,\r\n        instructionEncoding: {\r\n            type: 'FCO-Type',\r\n            opcode: '‭010001',\r\n            format: '10001',\r\n            cc: 'ccc',\r\n            cond: '01',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: '010001'\r\n        },\r\n        usage: 'movt.d $fd, $fs, cc',\r\n        result: 'if (conditional cc) d = s;',\r\n        notes: 'The condition code flag specifies which of the 8 condition codes to check. If it is omitted, 0 is the default.'\r\n    },\r\n    {\r\n        id: 'lwc1',\r\n        assemblyName: 'lwc1',\r\n        name: 'Load Word Coprocessor 1',\r\n        description: 'Load a word from memory to a floating point register',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '‭110001',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'lwc1 $ft, imm($s)',\r\n        result: 'ft = memory[s + imm]',\r\n        notes: '$ft is a floating point register, $s is a general purpose register.'\r\n    },\r\n    {\r\n        id: 'ldc1',\r\n        assemblyName: 'ldc1',\r\n        name: 'Load Double Coprocessor 1',\r\n        description: 'Load two words from memory to two floating point registers',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '‭110101',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'ldc1 $ft, imm($s)',\r\n        result: 'ft = memory[s + imm]',\r\n        notes: '$ft is a floating point register, $s is a general purpose register.'\r\n    },\r\n    {\r\n        id: 'swc1',\r\n        assemblyName: 'swc1',\r\n        name: 'Store Word Coprocessor 1',\r\n        description: 'Store a word from a floating point register to memory',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '‭111001',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'swc1 $ft, imm($s)',\r\n        result: 'memory[s + imm] = ft',\r\n        notes: '$ft is a floating point register, $s is a general purpose register.'\r\n    },\r\n    {\r\n        id: 'sdc1',\r\n        assemblyName: 'sdc1',\r\n        name: 'Store Double Coprocessor 1',\r\n        description: 'Store two words from memory to two floating point registers',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'I-Type',\r\n            opcode: '‭111101',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        usage: 'sdc1 $ft, imm($s)',\r\n        result: 'memory[s + imm] = ft',\r\n        notes: '$ft is a floating point register, $s is a general purpose register.'\r\n    },\r\n    {\r\n        id: 'l-s',\r\n        assemblyName: 'l.s',\r\n        name: 'Load Single',\r\n        description: 'Load a single-precision floating point value from memory to a register',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'lwc1 $ft, 0($at)'\r\n            ]\r\n        },\r\n        usage: 'l.s $ft, label',\r\n        result: 'ft = memory[s + imm]',\r\n    },\r\n    {\r\n        id: 'l-d',\r\n        assemblyName: 'l.d',\r\n        name: 'Load Double',\r\n        description: 'Load a double-precision floating point value from memory to a register',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'ldc1 $ft, 0($at)'\r\n            ]\r\n        },\r\n        usage: 'l.d $ft, label',\r\n        result: 'ft = memory[s + imm]',\r\n    },\r\n    {\r\n        id: 's-s',\r\n        assemblyName: 's.s',\r\n        name: 'Store Single',\r\n        description: 'Store a single-precision floating point value from memory to a register',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'swc1 $ft, 0($at)'\r\n            ]\r\n        },\r\n        usage: 's.s $ft, label',\r\n        result: 'memory[s + imm] = ft',\r\n    },\r\n    {\r\n        id: 's-d',\r\n        assemblyName: 's.d',\r\n        name: 'Store Double',\r\n        description: 'Store a double-precision floating point value from memory to a register',\r\n        category: instructionCategory.FLOAT_MEMORY,\r\n        instructionEncoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: [\r\n                'lui $at, label[31-16]',\r\n                'ori $at, $at, label[15-0]',\r\n                'sdc1 $ft, 0($at)'\r\n            ]\r\n        },\r\n        usage: 's.d $ft, label',\r\n        result: 'memory[s + imm] = ft',\r\n    },\r\n    {\r\n        id: 'mtc0',\r\n        assemblyName: 'mtc0',\r\n        name: 'Move to Coprocessor 0',\r\n        description: 'Move a value from a general-purpose register to a system control coprocessor register',\r\n        category: instructionCategory.SYSTEM,\r\n        instructionEncoding: {\r\n            type: 'COP-Type',\r\n            opcode: '‭010000',\r\n            funct: '00100',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            addr: '-----------'\r\n        },\r\n        usage: 'mtc0 $t, $d',\r\n        result: 'd = t',\r\n        notes: 'The first argument is the register from the main processor, the second is the register from the coprocessor. Unlike most MIPS instructions, the destination of the operation is not listed first.'\r\n    },\r\n    {\r\n        id: 'mfc0',\r\n        assemblyName: 'mfc0',\r\n        name: 'Move from Coprocessor 0',\r\n        description: 'Move a value from a system control coprocessor register to a general-purpose register',\r\n        category: instructionCategory.SYSTEM,\r\n        instructionEncoding: {\r\n            type: 'COP-Type',\r\n            opcode: '010000',\r\n            funct: '00000',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            addr: '-----------'\r\n        },\r\n        usage: 'mfc0 $t, $d',\r\n        result: 't = d',\r\n        notes: 'The first argument is the register from the main processor, the second is the register from the coprocessor.'\r\n    },\r\n];","import { instructionEncoding } from 'src/Models/IInstruction';\r\nimport { IInstructionType } from 'src/Models/IInstructionType';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const instructionTypeSource: IInstructionType[] = [\r\n    {\r\n        id: 'r-type',\r\n        name: 'R-Type',\r\n        shortName: 'R',\r\n        description: 'R-type is named for its focus on maximizing the number of registers. It can specify up to 3 registers. All arithmetic instructions which do not use an immediate are R-Type. Since R-Type instructions do not include immediate values (except the shift amount), space is not as tight as other types. Therefore, they all use the same opcode (0x0), and have a separate funct field to differentiate from each other. Additionally, many R-type instructions do not use all 6 fields.',\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'rs', size: 5},\r\n            {name: 'rt', size: 5},\r\n            {name: 'rd', size: 5},\r\n            {name: 'shamt', size: 5},\r\n            {name: 'funct', size: 6},\r\n        ],\r\n        encoding: {\r\n            type: 'R-Type',\r\n            opcode: '000000',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            shamt: 'iiiii',\r\n            funct: 'ffffff'\r\n        },\r\n    },\r\n    {\r\n        id: 'i-type',\r\n        name: 'I-Type',\r\n        shortName: 'I',\r\n        description: 'I-type is named for its focus on maximizing the size of the immediate. It can specify up to 2 registers and a 16-bit immediate value. All arithmetic instructions which use an immediate, most branch instructions, and most memory instructions are I-Type. Since I-Type instructions use half their bits for the immediate value, space is tight. Therefore, each I-Type instruction has a unique opcode. Additionally, many instructions must cleverly use the immediate field to fit as much information as possible. For example, branch instructions do not have room to store a 32 bit target address. Therefore, they store the distance from the current location of the branch (divided by 4, since the distance between intructions is always a multiple of 4 bytes).',\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'rs', size: 5},\r\n            {name: 'rt', size: 5},\r\n            {name: 'imm', size: 16},\r\n        ],\r\n        encoding: {\r\n            type: 'I-Type',\r\n            opcode: 'oooooo',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n    },\r\n    {\r\n        id: 'j-type',\r\n        name: 'J-Type',\r\n        shortName: 'J',\r\n        description: \"J-type is named for its focus on maximizing the possible distance of a jump. It can specify a 26-bit address. Like branch instructions, J-Type instructions do not have room to store a 32 bit target address. To 'fit' a 32 bit target into 26 bits, the target address is shifted two bits to the right (instructions are always word-aligned so the rightmost two bits are always 0), and then the upper 4 bits are discarded. When the jump is executed, the address is shifted left 2 bits, and the upper 4 bits of the current PC are added to the stored address to form a complete 32 bit target.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'addr', size: 26}\r\n        ],\r\n        encoding: {\r\n            type: 'J-Type',\r\n            opcode: '000010',\r\n            addr: 'aaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n        }\r\n    },\r\n    {\r\n        id: 'ri-type',\r\n        name: 'RI-Type',\r\n        shortName: 'RI',\r\n        description: 'RI-type is named for its use of an extra immediate field called register immediate (regimm) in place of the rt field from the otherwise identical I-Type instruction. It can specify a single register, a 5-bit immediate, and  16-bit immediate. RI-type is mainly used in certain branch instructions which compare a single register with 0. Like R-Type instructions, all RI-type instructions use the same opcode (0x1); the regimm field is used to differentiate RI-type instructions from each other.',\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'rs', size: 5},\r\n            {name: 'regimm', size: 5},\r\n            {name: 'imm', size: 16},\r\n        ],\r\n        encoding: {\r\n            type: 'RI-Type',\r\n            opcode: '000001',\r\n            rs: 'sssss',\r\n            regimm: 'rrrrr',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'cop-type',\r\n        name: 'COP-Type',\r\n        shortName: 'COP',\r\n        description: \"COP-type is named for its usage in interaction with coprocessors. The opcode is the same for all coprocessor instructions except for the last two bits, which specify the coproessor (0 - 3).\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'funct', size: 5},\r\n            {name: 'rt', size: 5},\r\n            {name: 'rd', size: 5},\r\n            {name: 'addr', size: 11}\r\n        ],\r\n        encoding: {\r\n            type: 'COP-Type',\r\n            opcode: '0100oo',\r\n            funct: 'fffff',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            addr: 'aaaaaaaaaaa'\r\n        }\r\n    },\r\n    {\r\n        id: 'ic-type',\r\n        name: 'IC-Type',\r\n        shortName: 'IC',\r\n        description: \"IC-type is used for operations with immediates which test a floating point conditional.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'format', size: 5},\r\n            {name: 'cc', size: 2},\r\n            {name: 'cond', size: 3},\r\n            {name: 'imm', size: 16}\r\n        ],\r\n        encoding: {\r\n            type: 'IC-Type',\r\n            opcode: 'oooooo',\r\n            format: 'fffff',\r\n            cc: 'ccc',\r\n            cond: 'cc',\r\n            imm: 'iiiiiiiiiiiiiiii'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'rc-type',\r\n        name: 'RC-Type',\r\n        shortName: 'RC',\r\n        description: \"RC-type is used for operations on registers which test a floating point conditional.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'rs', size: 5},\r\n            {name: 'cc', size: 2},\r\n            {name: 'cond', size: 3},\r\n            {name: 'rd', size: 5},\r\n            {name: 'shamt', size: 5},\r\n            {name: 'funct', size: 6}\r\n        ],\r\n        encoding: {\r\n            type: 'RC-Type',\r\n            opcode: 'oooooo',\r\n            rs: 'sssss',\r\n            cc: 'ccc',\r\n            cond: 'cc',\r\n            rd: 'ddddd',\r\n            shamt: 'sssss',\r\n            funct: 'ffffff'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'float',\r\n        name: 'F-Type',\r\n        shortName: 'F',\r\n        description: \"F-type is used for most floating point operations.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'format', size: 5},\r\n            {name: 'ft', size: 5},\r\n            {name: 'fs', size: 5},\r\n            {name: 'fd', size: 5},\r\n            {name: 'function', size: 6}\r\n        ],\r\n        encoding: {\r\n            type: 'F-Type',\r\n            opcode: '010001',\r\n            format: 'fffff',\r\n            ft: 'ttttt',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: 'ffffff'\r\n        }\r\n    },\r\n    {\r\n        id: 'float-conditional-operation',\r\n        name: 'FCO-Type',\r\n        shortName: 'FCO',\r\n        description: \"FCO-type is used for most floating point operations which check a conditional.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'format', size: 5},\r\n            {name: 'cc', size: 3},\r\n            {name: 'cond', size: 2},\r\n            {name: 'fs', size: 5},\r\n            {name: 'fd', size: 5},\r\n            {name: 'function', size: 6}\r\n        ],\r\n        encoding: {\r\n            type: 'FCO-Type',\r\n            opcode: '010001',\r\n            format: 'fffff',\r\n            cc: 'ccc',\r\n            cond: 'cc',\r\n            fs: 'sssss',\r\n            fd: 'ddddd',\r\n            funct: 'ffffff'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'float-conditional-test',\r\n        name: 'FCT-Type',\r\n        shortName: 'FCT',\r\n        description: \"FCT-type is used for most floating point operations which set a conditional based on a test.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'format', size: 5},\r\n            {name: 'ft', size: 5},\r\n            {name: 'fs', size: 5},\r\n            {name: 'cc', size: 3},\r\n            {name: 'cond', size: 2},\r\n            {name: 'fc', size: 2},\r\n            {name: 'function', size: 4}\r\n        ],\r\n        encoding: {\r\n            type: 'FCT-Type',\r\n            opcode: '010001',\r\n            format: 'fffff',\r\n            ft: 'ttttt',\r\n            fs: 'sssss',\r\n            cc: 'ccc',\r\n            cond: 'cc',\r\n            fc: 'ff',\r\n            funct: 'ffff'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'special-two',\r\n        name: 'SPECIAL2-Type',\r\n        shortName: 'SPECIAL2',\r\n        description: \"SPECIAL2-type is used for some instructions added in later versions of the MIPS processor.\",\r\n        fields: [\r\n            {name: 'opcode', size: 6},\r\n            {name: 'rs', size: 5},\r\n            {name: 'rt', size: 5},\r\n            {name: 'rd', size: 5},\r\n            {name: 'special', size: 5},\r\n            {name: 'funct', size: 6},\r\n        ],\r\n        encoding: {\r\n            type: 'SPECIAL2-Type',\r\n            opcode: '011100',\r\n            rs: 'sssss',\r\n            rt: 'ttttt',\r\n            rd: 'ddddd',\r\n            special: 'sssss',\r\n            funct: 'ffffff'\r\n        },\r\n        notes: 'Since this instruction type is not used for a large number of instructions, its name and some field names are not consistent across reference sources.'\r\n    },\r\n    {\r\n        id: 'pseudo-instruction',\r\n        name: 'Pseudo-Instruction',\r\n        shortName: 'PSEUDO',\r\n        description: \"The MIPS processor is designed to be simple, featuring a relatively small set of machine instructions (instruction which the processor can run). Pseudo-instructions are provided as a convenience for assembly language programmers for common operations that are not implemented in the processor. Unlike other instructions, which are translated by the assembler directly into a corresponding machine instruction, pseudo-instructions do not correspond directly with a single machine instruction. The pseudo-instructions are provided by the assember (the program that translates your assembly language code into a binary program in machine language). Pseudo-instructions are first translated by the assembler into one or more 'real' instructions which perform the desired operation, then these real instructions are translated to equivalent machine language.\",\r\n        fields: [],\r\n        encoding: {\r\n            type: 'Pseudo-Instruction',\r\n            equivalentInstructions: []\r\n        }\r\n    },\r\n];\r\n\r\n\r\nexport const instructionTypeFromEncoding = (enc: instructionEncoding) => {\r\n    const type = instructionTypeSource.find(it => it.name === enc.type);\r\n    if (!type) {\r\n        throw new Error(\"Unknown instruction type\");\r\n    }\r\n    return type;\r\n}","import { IRegister } from 'src/Models/IRegister';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const registerSource: IRegister[] = [\r\n    {\r\n        id: 'zero',\r\n        name: 'Zero',\r\n        numbers: '$0',\r\n        letterNumbers: '$zero',\r\n        description: 'Constant zero value',\r\n        preserved: 'n/a',\r\n        notes: 'This register always holds a value of zero; attempting to assign other values to it will have no effect.'\r\n    },\r\n    {\r\n        id: 'at',\r\n        name: 'Assembler Temporary',\r\n        numbers: '$1',\r\n        letterNumbers: '$at',\r\n        description: 'Reserved for usage by the assembler',\r\n        preserved: 'n/a',\r\n        notes: 'This register is reserved for use by the assembler (e.g. in expanding pseudo instructions). It should not generally be used.'\r\n    },\r\n    {\r\n        id: 'values',\r\n        name: '(Return) Values',\r\n        numbers: '$2 - $3',\r\n        letterNumbers: '$v0 - $v1',\r\n        description: 'Values returned from syscalls or function calls',\r\n        preserved: 'n/a'\r\n    },\r\n    {\r\n        id: 'arguments',\r\n        name: 'Arguments',\r\n        numbers: '$4 - $7',\r\n        letterNumbers: '$a0 - $a3',\r\n        description: 'Arguments for syscalls or function calls',\r\n        preserved: 'yes'\r\n    },\r\n    {\r\n        id: 'temporaries-low',\r\n        name: 'Temporaries',\r\n        numbers: '$8 - $15',\r\n        letterNumbers: '$t0 - $t7',\r\n        description: 'General use registers whose values will not be preserved across function calls',\r\n        preserved: 'no',\r\n        notes: 'These registers are not saved across function calls. If you call a function, you can not assume they will have the same values once the function call returns. If you are writing a function, you can overwrite the values in any of these registers.'\r\n    },\r\n    {\r\n        id: 'saves',\r\n        name: 'Saves',\r\n        numbers: '$16 - $23',\r\n        letterNumbers: '$s0 - $s7',\r\n        description: 'General use registers whose values will be preserved across function calls',\r\n        preserved: 'yes',\r\n        notes: 'These registers are saved across function calls. If you call a function, you can assume they will have the same values once the function call returns. If you are writing a function, you can not overwrite the values in any of these registers. If you need to use these registers inside a function, you must save their previous values to the stack and restore them before your function returns.'\r\n    },\r\n    {\r\n        id: 'temporaries-high',\r\n        name: 'Temporaries',\r\n        numbers: '$24 - $25',\r\n        letterNumbers: '$t8 - $t9',\r\n        description: 'General use registers whose values will not be preserved across function calls',\r\n        preserved: 'no',\r\n        notes: 'These registers are not saved across function calls. If you call a function, you can not assume they will have the same values once the function call returns. If you are writing a function, you can overwrite the values in any of these registers.'\r\n    },\r\n    {\r\n        id: 'global-pointer',\r\n        name: 'Global Pointer',\r\n        numbers: '$28',\r\n        letterNumbers: '$gp',\r\n        description: 'Used to enable efficient access to global labels',\r\n        preserved: 'yes'\r\n    },\r\n    {\r\n        id: 'stack-pointer',\r\n        name: 'Stack Pointer',\r\n        numbers: '$29',\r\n        letterNumbers: '$sp',\r\n        description: 'Used to track the current top of the stack',\r\n        preserved: 'yes'\r\n    },\r\n    {\r\n        id: 'frame-pointer',\r\n        name: 'Frame Pointer',\r\n        numbers: '$30',\r\n        letterNumbers: '$fp',\r\n        description: 'Used to track the location of the current frame',\r\n        preserved: 'yes'\r\n    },\r\n    {\r\n        id: 'return-address',\r\n        name: 'Return Address',\r\n        numbers: '$31',\r\n        letterNumbers: '$ra',\r\n        description: 'Used to track the location to return to at the end of the current funciton call',\r\n        preserved: 'yes'\r\n    },\r\n    {\r\n        id: 'float',\r\n        name: 'Floating Point Registers',\r\n        numbers: '$0 - $31',\r\n        letterNumbers: '$f0 – $f31',\r\n        description: 'A second set of 32 registers used by all floating point instructions.',\r\n        preserved: 'no convention',\r\n        notes: 'Unlike general-purpose registers (the main set of registers), there are no conventions for saving across function calls or special-purpose floating point registers. $f0 does not hold a value of zero like $0 (it can be used like any other floating point register). When working with doubles, each value uses two registers (the first of which must be an even-numbered register). These registers are located in coprocessor 1; data can be tranfered between general purpose registers and floating point registers using the mtc1 and mfc1 instructions.'\r\n    },\r\n    {\r\n        id: 'hi',\r\n        name: 'HI (Multiplication Result/Division Remainder)',\r\n        numbers: 'n/a',\r\n        letterNumbers: 'n/a',\r\n        description: 'Used to store the upper 32 bits of the result from integer multiplication, or the remainder resultant from integer division',\r\n        preserved: 'n/a',\r\n        notes: 'Cannot be accessed directly. Value can be retrieved with the mfhi instruction, or changed with the mthi instruction.'\r\n    },\r\n    {\r\n        id: 'lo',\r\n        name: 'LO (Multiplication Result/Division Quotient)',\r\n        numbers: 'n/a',\r\n        letterNumbers: 'n/a',\r\n        description: 'Used to store the lower 32 bits of the result from integer multiplication, or the quotient resultant from integer division',\r\n        preserved: 'n/a',\r\n        notes: 'Cannot be accessed directly. Value can be retrieved with the mflo instruction, or changed with the mtlo instruction.'\r\n    },\r\n    {\r\n        id: 'pc',\r\n        name: 'Program Counter',\r\n        numbers: 'n/a',\r\n        letterNumbers: 'n/a',\r\n        description: 'Used to store the address of the instruction currently being executed',\r\n        preserved: 'n/a',\r\n        notes: 'Cannot be accessed directly. Jumps and branches change this value to cause execution to move to the desired location.'\r\n    },\r\n];","import { ISyscall } from 'src/Models/ISyscall';\r\n\r\n/* tslint:disable:object-literal-sort-keys */\r\n\r\nexport const syscallSource: ISyscall[] = [\r\n    {\r\n        description: 'Print an integer to the console',\r\n        id: 'print-integer',\r\n        inputs: '$a0 = integer to print',\r\n        name: 'Print Integer',\r\n        number: '1',\r\n        outputs: '<none>'\r\n    },\r\n    {\r\n        description: 'Print a float to the console',\r\n        id: 'print-float',\r\n        inputs: '$f12 = float to print',\r\n        name: 'Print Float',\r\n        number: '2',\r\n        outputs: '<none>'\r\n    },\r\n    {\r\n        description: 'Print a double to the console',\r\n        id: 'print-double',\r\n        inputs: '$f12 = float to print',\r\n        name: 'Print Double',\r\n        number: '3',\r\n        outputs: '<none>'\r\n    },\r\n    {\r\n        description: 'Print a string to the console',\r\n        id: 'print-string',\r\n        inputs: '$a0 = address of string to print',\r\n        name: 'Print String',\r\n        number: '4',\r\n        outputs: '<none>',\r\n        notes: 'The string must be null terminated.'\r\n    },\r\n    {\r\n        description: 'Read an integer from the console',\r\n        id: 'read-int',\r\n        inputs: '<none>',\r\n        name: 'Read Integer',\r\n        number: '5',\r\n        outputs: '$v0 = inputted integer'\r\n    },\r\n    {\r\n        description: 'Read a float from the console',\r\n        id: 'read-float',\r\n        inputs: '<none>',\r\n        name: 'Read Float',\r\n        number: '6',\r\n        outputs: '$f0 = inputted float'\r\n    },\r\n    {\r\n        description: 'Read a double from the console',\r\n        id: 'read-double',\r\n        inputs: '<none>',\r\n        name: 'Read Double',\r\n        number: '7',\r\n        outputs: '$f0 = inputted double'\r\n    },\r\n    {\r\n        description: 'Read a string from the console',\r\n        id: 'read-string',\r\n        inputs: '$a0 = address to store inputted string; $a1 = number of characters to read',\r\n        name: 'Read String',\r\n        number: '8',\r\n        outputs: '<none>',\r\n        notes: 'The number of characters to read (specified in $a1) is a maximum; the syscall will keep reading characters until you enter a newline (press enter) or it reaches the maximum. If you press enter before the maximum number of characters has been read, the newline character (ASCII value 10) will be included in the inputted string. The number of characters to read also includes the null terminator. Thus, the maximum number of characters which can be read from the console is actually one less than number specified.'\r\n    },\r\n    {\r\n        description: 'Allocate memory dynamically',\r\n        id: 'allocate-memory',\r\n        inputs: '$a0 = number of bytes to allocate',\r\n        name: 'Allocate Memory',\r\n        number: '9',\r\n        outputs: '$v0 = address of allocated memory'\r\n    },\r\n    {\r\n        description: 'Exit the program',\r\n        id: 'exit',\r\n        inputs: '<none>',\r\n        name: 'Exit',\r\n        number: '10',\r\n        outputs: '<none>'\r\n    },\r\n    {\r\n        description: 'Print a character to the console',\r\n        id: 'print-character',\r\n        inputs: '$a0 = character to print (ascii value)',\r\n        name: 'Print Character',\r\n        number: '11',\r\n        outputs: '<none>'\r\n    },\r\n    {\r\n        description: 'Read a character from the console',\r\n        id: 'read-character',\r\n        inputs: '<none>',\r\n        name: 'Read Character',\r\n        number: '12',\r\n        outputs: '$v0 = inputted character (ascii value)'\r\n    }\r\n];","import * as React from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { IGuide } from 'src/Models/IGuide';\r\n\r\n\r\ninterface IGuideDetailProps { \r\n    item: IGuide;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IGuideDetailState {\r\n}\r\n\r\nclass GuideDetail extends React.Component<IGuideDetailProps, IGuideDetailState> {\r\n    public constructor(props: IGuideDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                {this.props.item.items.map((v) => {\r\n                    let itemComponent: JSX.Element;\r\n                    switch (v.type) {\r\n                        case 'heading': {\r\n                            itemComponent = <h4 className=\"text-primary\">{v.text}</h4>;\r\n                            break;\r\n                        }\r\n                        case 'paragraph': {\r\n                            itemComponent = <p>{v.text}</p>;\r\n                            break;\r\n                        }\r\n                        case 'code': {\r\n                            itemComponent = <Card className=\"bg-light mb-3\"><CardBody><pre className=\"mb-0\"><code>{v.text.replace(/;/g, '\\n')}</code></pre></CardBody></Card>;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return itemComponent;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GuideDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { IGuide } from 'src/Models/IGuide';\r\n\r\ninterface IGuideListItemProps { \r\n    guide: IGuide;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IGuideListItemState {\r\n}\r\n\r\nclass GuideListItem extends React.Component<IGuideListItemProps, IGuideListItemState> {\r\n    public constructor(props: IGuideListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.guide.name}</Badge>&nbsp;{this.props.guide.description}\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    <Link to={`/guides/${this.props.guide.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GuideListItem;\r\n","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport { IGuide } from 'src/Models/IGuide';\r\nimport GuideListItem from './GuideListItem';\r\n\r\ninterface IGuideListProps {\r\n    items: IGuide[];\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IGuideListState {\r\n}\r\n\r\nclass GuideList extends React.Component<IGuideListProps, IGuideListState> {\r\n    public constructor(props: IGuideListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Guides</h1>\r\n                <ListGroup flush={true}>\r\n                    {this.props.items.map(v => <GuideListItem guide={v} key={v.id}/>)}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GuideList;\r\n","import * as React from 'react';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { IAssemblerDirective } from 'src/Models/IAssemblerDirective';\r\n\r\n\r\ninterface IAssemblerDirectiveDetailProps { \r\n    item: IAssemblerDirective;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IAssemblerDirectiveDetailState {\r\n}\r\n\r\nclass AssemblerDirectiveDetail extends React.Component<IAssemblerDirectiveDetailProps, IAssemblerDirectiveDetailState> {\r\n    public constructor(props: IAssemblerDirectiveDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                <h4 className=\"text-primary\">Summary</h4>\r\n                <p>{this.props.item.description}</p>\r\n                <Row>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Usage</CardHeader>\r\n                            <CardBody>\r\n                                <CardText><code>{this.props.item.usage}</code></CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Arguements</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.arguments}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Effect</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.effect}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.item.notes ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Notes</h4>\r\n                        <p>{this.props.item.notes}</p>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssemblerDirectiveDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { IAssemblerDirective } from 'src/Models/IAssemblerDirective';\r\n\r\ninterface IAssemblerDirectiveListItemProps { \r\n    assemblerDirective: IAssemblerDirective;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IAssemblerDirectiveListItemState {\r\n}\r\n\r\nclass AssemblerDirectiveListItem extends React.Component<IAssemblerDirectiveListItemProps, IAssemblerDirectiveListItemState> {\r\n    public constructor(props: IAssemblerDirectiveListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.assemblerDirective.name}</Badge>&nbsp;{this.props.assemblerDirective.description}\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    Usage: <code>{this.props.assemblerDirective.usage}</code>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Link to={`/assembler-directives/${this.props.assemblerDirective.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssemblerDirectiveListItem;\r\n","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport { IAssemblerDirective } from 'src/Models/IAssemblerDirective';\r\nimport AssemblerDirectiveListItem from './AssemblerDirectiveListItem';\r\n\r\ninterface IAssemblerDirectiveListProps {\r\n    items: IAssemblerDirective[];\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IAssemblerDirectiveListState {\r\n}\r\n\r\nclass AssemblerDirectiveList extends React.Component<IAssemblerDirectiveListProps, IAssemblerDirectiveListState> {\r\n    public constructor(props: IAssemblerDirectiveListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Assembler Directives</h1>\r\n                <ListGroup flush={true}>\r\n                    {this.props.items.map(v => <AssemblerDirectiveListItem assemblerDirective={v} key={v.id}/>)}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssemblerDirectiveList;\r\n","import * as React from 'react';\r\nimport { Card, CardBody, CardHeader, Table } from 'reactstrap';\r\nimport { instructionEncoding } from 'src/Models/IInstruction';\r\n\r\ninterface IInstructionEncodingProps { \r\n    enc: instructionEncoding;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionEncodingState {\r\n}\r\n\r\nclass InstructionEncoding extends React.Component<IInstructionEncodingProps, IInstructionEncodingState> {\r\n    public constructor(props: IInstructionEncodingProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.enc.type === 'Pseudo-Instruction') {\r\n            return (\r\n                <div>\r\n                    <h4 className=\"text-primary\">Expansion</h4>\r\n                    <Card className=\"mb-3\">\r\n                        <CardHeader>Equivalent Instructions</CardHeader>\r\n                        <CardBody>\r\n                            <pre className=\"mb-0\"><code>{this.props.enc.equivalentInstructions.join('\\n')}</code></pre>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        } else {\r\n            let tableFormat: {headings: string[], lengths: number[], bits: string[], values: string[]};\r\n            const enc = this.props.enc;\r\n            switch (enc.type) {\r\n                case 'I-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"rs\", \"rt\", \"imm\"],\r\n                        lengths: [6, 5, 5, 16],\r\n                        values: [enc.opcode, enc.rs, enc.rt, enc.imm]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'J-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"addr\"],\r\n                        lengths: [6, 26],\r\n                        values: [enc.opcode, enc.addr]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'R-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11', '10 09 08 07 06', '05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"rs\", \"rt\", \"rd\", \"shamt\", \"funct\"],\r\n                        lengths: [6, 5, 5, 5, 5, 6],\r\n                        values: [enc.opcode, enc.rs, enc.rt, enc.rd, enc.shamt, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'RI-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"rs\", \"regimm\", \"imm\"],\r\n                        lengths: [6, 5, 5, 16],\r\n                        values: [enc.opcode, enc.rs, enc.regimm, enc.imm]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'COP-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11', '10 09 08 07 06 05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"funct\", \"rt\", \"rd\", \"addr\"],\r\n                        lengths: [6, 5, 5, 5, 11],\r\n                        values: [enc.opcode, enc.funct, enc.rt, enc.rd, enc.addr]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'F-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11', '10 09 08 07 06', '05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"format\", \"ft\", \"fs\", \"fd\", \"function\"],\r\n                        lengths: [6, 5, 5, 5, 5, 6],\r\n                        values: [enc.opcode, enc.format, enc.ft, enc.fs, enc.fd, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'FCO-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18', '17 16', '15 14 13 12 11', '10 09 08 07 06', '05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"format\", \"cc\", \"cond\", \"fs\", \"fd\", \"funct\"],\r\n                        lengths: [6, 5, 3, 2, 5, 5, 6],\r\n                        values: [enc.opcode, enc.format, enc.cc, enc.cond, enc.fs, enc.fd, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'FCT-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11', '10 09 08', '07 06', '05 04', '03 02 01 00'],\r\n                        headings: [\"opcode\", \"format\", \"ft\", \"fs\", \"cc\", \"cond\", \"fc\", \"funct\"],\r\n                        lengths: [6, 5, 5, 5, 3, 2, 2, 4],\r\n                        values: [enc.opcode, enc.format, enc.ft, enc.fs, enc.cc, enc.cond, enc.fc, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'IC-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18', '17 16', '15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"format\", \"cc\", \"cond\", \"imm\"],\r\n                        lengths: [6, 5, 3, 2, 16],\r\n                        values: [enc.opcode, enc.format, enc.cc, enc.cond, enc.imm]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'RC-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18', '17 16', '15 14 13 12 11', '10 09 08 07 06', '05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"rs\", \"cc\", \"cond\", \"rd\", \"shamt\", \"funct\"],\r\n                        lengths: [6, 5, 3, 2, 5, 5, 6],\r\n                        values: [enc.opcode, enc.rs, enc.cc, enc.cond, enc.rd, enc.shamt, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                case 'SPECIAL2-Type': {\r\n                    tableFormat = {\r\n                        bits: ['31 30 29 28 27 26', '25 24 23 22 21', '20 19 18 17 16', '15 14 13 12 11', '10 09 08 07 06', '05 04 03 02 01 00'],\r\n                        headings: [\"opcode\", \"rs\", \"rt\", \"rd\", \"special\", \"funct\"],\r\n                        lengths: [6, 5, 5, 5, 5, 6],\r\n                        values: [enc.opcode, enc.rs, enc.rt, enc.rd, enc.special, enc.funct]\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unknown instruction type\");\r\n                }\r\n            }\r\n\r\n            return (\r\n            <div>\r\n                <h4 className=\"text-primary\">Encoding</h4>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\" />\r\n                            {(() => {\r\n                                return tableFormat.headings.map(v => <th scope=\"col\" key={v}>{v}</th>);\r\n                            })()}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th scope=\"row\" key=\"v\">Length</th>\r\n                            {(() => {\r\n                                return tableFormat.lengths.map((v, i) => <td key={tableFormat.headings[i]}>{v}</td>);\r\n                            })()}\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\">\r\n                                <span className=\"bit-number-offset\"/>\r\n                                <span className=\"bit-number\">Bit&nbsp;Numbers</span><br/>\r\n                                <span className=\"bit-value\">Bit&nbsp;Values</span>\r\n                            </th>\r\n                            {(() => {\r\n                                return tableFormat.values.map((v, i) => \r\n                                    <td className=\"text-nowrap font-weight-bold\" key={v}>\r\n                                        <span className=\"bit-number-offset\"/>\r\n                                        <span className=\"bit-number text-monospace\">{tableFormat.bits[i]}</span><br/>\r\n                                        <span className=\"bit-value text-monospace\">{v}</span>\r\n                                    </td>\r\n                                );\r\n                            })()}\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default InstructionEncoding;","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { IInstruction } from 'src/Models/IInstruction';\r\nimport { IInstructionType } from 'src/Models/IInstructionType';\r\nimport InstructionEncoding from './InstructionEncoding';\r\n\r\ninterface IInstructionDetailProps { \r\n    item: IInstruction;\r\n    type: IInstructionType;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionDetailState {\r\n}\r\n\r\nclass InstructionDetail extends React.Component<IInstructionDetailProps, IInstructionDetailState> {\r\n    public constructor(props: IInstructionDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                <h4 className=\"text-primary\">Summary</h4>\r\n                <p>{this.props.item.description}</p>\r\n                <Row>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Usage</CardHeader>\r\n                            <CardBody>\r\n                                <CardText><code>{this.props.item.usage}</code></CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Result</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.result}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Type</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>\r\n                                    <Link className=\"link-uncolored\" to={`/instruction-types/${this.props.type.id}`}>{this.props.item.instructionEncoding.type}</Link>\r\n                                </CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <InstructionEncoding enc={this.props.item.instructionEncoding} />\r\n                {this.props.item.notes ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Notes</h4>\r\n                        <p>{this.props.item.notes}</p>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InstructionDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { IInstruction } from 'src/Models/IInstruction';\r\n\r\ninterface IInstructionListItemProps { \r\n    instruction: IInstruction;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionListItemState {\r\n}\r\n\r\nclass InstructionListItem extends React.Component<IInstructionListItemProps, IInstructionListItemState> {\r\n    public constructor(props: IInstructionListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.instruction.assemblyName}</Badge>&nbsp;\r\n                    {this.props.instruction.description}&nbsp;\r\n                    <Badge color=\"secondary\" pill={true}>{this.props.instruction.instructionEncoding.type}</Badge>\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    Usage: <code>{this.props.instruction.usage}</code>&nbsp;&nbsp;&nbsp;\r\n                    <Link to={`/instructions/${this.props.instruction.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InstructionListItem;\r\n","import * as React from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { Form, FormGroup, Input, Label, ListGroup } from 'reactstrap';\r\nimport { IInstruction, instructionCategory } from 'src/Models/IInstruction';\r\nimport InstructionListItem from './InstructionListItem';\r\n\r\ninterface IInstructionListProps  extends RouteComponentProps<{}>, React.Props<{}>{\r\n    items: IInstruction[];\r\n}\r\n\r\ninterface IInstructionListState {\r\n    searchText: string;\r\n}\r\n\r\nclass InstructionList extends React.Component<IInstructionListProps, IInstructionListState> {\r\n    private searchFieldRef: React.RefObject<HTMLInputElement>;\r\n\r\n    public constructor(props: IInstructionListProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchText: ''\r\n        }\r\n        this.searchFieldRef = React.createRef<HTMLInputElement>();\r\n\r\n        this.componentWillMount = this.componentWillMount.bind(this);\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    public componentWillMount() {\r\n        this.setState({\r\n            searchText: (window.URLSearchParams && (new URLSearchParams(this.props.location.search)).get('search')) || ''\r\n        });\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.searchFieldRef.current) {\r\n            this.searchFieldRef.current.focus();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const instructionCategories = Object.keys(instructionCategory).map(k => instructionCategory[k]);\r\n        const search = this.state.searchText.toLowerCase().trim().split(' ');\r\n\r\n        return (\r\n            <div>\r\n                <h1>Instructions</h1>\r\n                <Form inline={true}>\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label for=\"search\" className=\"mr-sm-2\">Search</Label>\r\n                        <Input type=\"text\" name=\"search\" id=\"filter\" autoComplete=\"off\" placeholder=\"name, description, tags...\" value={this.state.searchText} onChange={this.searchTextChanged} innerRef={this.searchFieldRef} />\r\n                    </FormGroup>\r\n                </Form>\r\n                {(() => {\r\n                    if (search.length !== 1) {\r\n                        return null;\r\n                    }\r\n                    const exactMatches = this.props.items.filter(i => i.assemblyName === search[0])\r\n                    if (exactMatches.length === 0) {\r\n                        return null;\r\n                    } else {\r\n                        return (\r\n                            <div key=\"exact-match\">\r\n                                <h3 className=\"text-capitalize\">Exact Match</h3>\r\n                                <ListGroup flush={true}>\r\n                                    {exactMatches.map(v => <InstructionListItem instruction={v} key={v.id}/>)}\r\n                                </ListGroup>\r\n                            </div>\r\n                        ); \r\n                    }\r\n                })()}\r\n                {instructionCategories.map(c => {\r\n                    const instructions = this.props.items.filter(v => \r\n                        v.category === c &&\r\n                        (search.length !== 1 || v.assemblyName !== search[0])\r\n                        && (\r\n                            search.length === 0 || \r\n                            search.reduce<boolean>((a, s) => a && (\r\n                                v.assemblyName.toLowerCase().includes(s) ||\r\n                                v.description.toLowerCase().includes(s) ||\r\n                                (!!v.tags?.includes(s))\r\n                            ), true)\r\n                    ))\r\n                    if (instructions.length > 0) {\r\n                        return (\r\n                            <div key={c}>\r\n                                <h3 className=\"text-capitalize\">{c}</h3>\r\n                                <ListGroup flush={true}>\r\n                                    {instructions.map(v => <InstructionListItem instruction={v} key={v.id}/>)}\r\n                                </ListGroup>\r\n                            </div>\r\n                        ); \r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private searchTextChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        const search = ev.target.value;\r\n\r\n        if (search) {\r\n            this.props.history.replace({pathname: this.props.location.pathname, search: `search=${search}`});\r\n        } else {\r\n            this.props.history.replace({pathname: this.props.location.pathname, search: ''});\r\n        }\r\n        this.setState({searchText: ev.target.value});\r\n    };\r\n}\r\n\r\nexport default withRouter(InstructionList);\r\n","import * as React from 'react';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { IInstructionType } from 'src/Models/IInstructionType';\r\nimport InstructionEncoding from '../Instructions/InstructionEncoding';\r\n\r\n\r\ninterface IInstructionTypeDetailProps { \r\n    item: IInstructionType;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionTypeDetailState {\r\n}\r\n\r\nclass InstructionTypeDetail extends React.Component<IInstructionTypeDetailProps, IInstructionTypeDetailState> {\r\n    public constructor(props: IInstructionTypeDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                <h4 className=\"text-primary\">Description</h4>\r\n                <p>{this.props.item.description}</p>\r\n                {this.props.item.encoding.type !== 'Pseudo-Instruction' ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Fields</h4>\r\n                            <Row>\r\n                                {this.props.item.fields.map(v => (\r\n                                    <Col key={v.name} sm={Math.max(Math.floor(12/this.props.item.fields.length), 2)}>\r\n                                        <Card className=\"mb-3\">\r\n                                            <CardHeader>{v.name}</CardHeader>\r\n                                            <CardBody>\r\n                                                <CardText>Size: {v.size}</CardText>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                ))}\r\n                            </Row>\r\n                            <InstructionEncoding enc={this.props.item.encoding} />\r\n                        </div>\r\n                ) : null}\r\n                {this.props.item.notes ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Notes</h4>\r\n                        <p>{this.props.item.notes}</p>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InstructionTypeDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { IInstructionType } from 'src/Models/IInstructionType';\r\n\r\ninterface IInstructionTypeListItemProps { \r\n    instructionType: IInstructionType;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionTypeListItemState {\r\n}\r\n\r\nclass InstructionTypeListItem extends React.Component<IInstructionTypeListItemProps, IInstructionTypeListItemState> {\r\n    public constructor(props: IInstructionTypeListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.instructionType.shortName}</Badge>&nbsp;{this.props.instructionType.name}\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    Fields(s): <code>{this.props.instructionType.fields.map(v => v.name).join(', ') || '<n/a>'}</code>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Link to={`/instruction-types/${this.props.instructionType.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InstructionTypeListItem;\r\n","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport { IInstructionType } from 'src/Models/IInstructionType';\r\nimport InstructionTypeListItem from './InstructionTypeListItem';\r\n\r\ninterface IInstructionTypeListProps {\r\n    items: IInstructionType[];\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IInstructionTypeListState {\r\n}\r\n\r\nclass InstructionTypeList extends React.Component<IInstructionTypeListProps, IInstructionTypeListState> {\r\n    public constructor(props: IInstructionTypeListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Instruction Types</h1>\r\n                <ListGroup flush={true}>\r\n                    {this.props.items.map(v => <InstructionTypeListItem instructionType={v} key={v.id}/>)}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InstructionTypeList;\r\n","import * as React from 'react';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { IRegister } from 'src/Models/IRegister';\r\n\r\n\r\ninterface IRegisterDetailProps { \r\n    item: IRegister;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IRegisterDetailState {\r\n}\r\n\r\nclass RegisterDetail extends React.Component<IRegisterDetailProps, IRegisterDetailState> {\r\n    public constructor(props: IRegisterDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                <h4 className=\"text-primary\">Summary</h4>\r\n                <p>{this.props.item.description}</p>\r\n                <Row>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Numbers</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.numbers}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Friendly Names</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.letterNumbers}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Preserved Accross Function Calls</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.preserved}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.item.notes ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Notes</h4>\r\n                        <p>{this.props.item.notes}</p>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { IRegister } from 'src/Models/IRegister';\r\n\r\ninterface IRegisterListItemProps { \r\n    register: IRegister;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IRegisterListItemState {\r\n}\r\n\r\nclass RegisterListItem extends React.Component<IRegisterListItemProps, IRegisterListItemState> {\r\n    public constructor(props: IRegisterListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.register.numbers}</Badge>&nbsp;{this.props.register.name}\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    Friendly Name(s): <code>{this.props.register.letterNumbers}</code>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Link to={`/registers/${this.props.register.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterListItem;\r\n","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport { IRegister } from 'src/Models/IRegister';\r\nimport RegisterListItem from './RegisterListItem';\r\n\r\ninterface IRegisterListProps {\r\n    items: IRegister[];\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IRegisterListState {\r\n}\r\n\r\nclass RegisterList extends React.Component<IRegisterListProps, IRegisterListState> {\r\n    public constructor(props: IRegisterListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Registers</h1>\r\n                <ListGroup flush={true}>\r\n                    {this.props.items.map(v => <RegisterListItem register={v} key={v.id}/>)}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterList;\r\n","import * as React from 'react';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { ISyscall } from 'src/Models/ISyscall';\r\n\r\n\r\ninterface ISyscallDetailProps { \r\n    item: ISyscall;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface ISyscallDetailState {\r\n}\r\n\r\nclass SyscallDetail extends React.Component<ISyscallDetailProps, ISyscallDetailState> {\r\n    public constructor(props: ISyscallDetailProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.item.name}</h1>\r\n                <h4 className=\"text-primary\">Summary</h4>\r\n                <p>{this.props.item.description}</p>\r\n                <Row>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Code ($v0)</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.number}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Inputs</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.inputs}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Card className=\"mb-3\">\r\n                            <CardHeader>Outputs</CardHeader>\r\n                            <CardBody>\r\n                                <CardText>{this.props.item.outputs}</CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.item.notes ? (\r\n                    <div>\r\n                        <h4 className=\"text-primary\">Notes</h4>\r\n                        <p>{this.props.item.notes}</p>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SyscallDetail;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\r\nimport { ISyscall } from 'src/Models/ISyscall';\r\n\r\ninterface ISyscallListItemProps { \r\n    syscall: ISyscall;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface ISyscallListItemState {\r\n}\r\n\r\nclass SyscallListItem extends React.Component<ISyscallListItemProps, ISyscallListItemState> {\r\n    public constructor(props: ISyscallListItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                    <Badge color=\"primary\">{this.props.syscall.number}</Badge>&nbsp;{this.props.syscall.description}\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText className=\"mb-0\">\r\n                    Input(s): <code>{this.props.syscall.inputs || \"<none>\"}</code>&nbsp;\r\n                    Outputs(s): <code>{this.props.syscall.outputs || \"<none>\"}</code>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <Link to={`/syscalls/${this.props.syscall.id}`}>See more</Link>\r\n                </ListGroupItemText>\r\n            </ListGroupItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SyscallListItem;\r\n","import * as React from 'react';\r\nimport { ListGroup } from 'reactstrap';\r\nimport { ISyscall } from 'src/Models/ISyscall';\r\nimport SyscallListItem from './SyscallListItem';\r\n\r\ninterface ISyscallListProps {\r\n    items: ISyscall[];\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface ISyscallListState {\r\n}\r\n\r\nclass SyscallList extends React.Component<ISyscallListProps, ISyscallListState> {\r\n    public constructor(props: ISyscallListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Syscalls</h1>\r\n                <ListGroup flush={true}>\r\n                    {this.props.items.map(v => <SyscallListItem syscall={v} key={v.id}/>)}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SyscallList;\r\n","import * as React from 'react';\r\n\r\nimport { assemblerDirectiveSource } from './AssemblerDirectiveSource';\r\nimport { guideSource } from './GuideSource';\r\nimport { instructionSource } from './InstructionSource';\r\nimport { instructionTypeFromEncoding, instructionTypeSource } from './InstructionTypeSource';\r\nimport { registerSource } from './RegisterSource';\r\nimport { syscallSource } from './SyscallSource';\r\n\r\nimport GuideDetail from 'src/Components/Guides/GuideDetail';\r\nimport GuideList from 'src/Components/Guides/GuideList';\r\nimport AssemblerDirectiveDetail from '../Components/AssemblerDirectives/AssemblerDirectiveDetail';\r\nimport AssemblerDirectiveList from '../Components/AssemblerDirectives/AssemblerDirectiveList';\r\nimport InstructionDetail from '../Components/Instructions/InstructionDetail';\r\nimport InstructionList from '../Components/Instructions/InstructionList';\r\nimport InstructionTypeDetail from '../Components/InstructionTypes/InstructionTypeDetail';\r\nimport InstructionTypeList from '../Components/InstructionTypes/InstructionTypeList';\r\nimport RegisterDetail from '../Components/Registers/RegisterDetail';\r\nimport RegisterList from '../Components/Registers/RegisterList';\r\nimport SyscallDetail from '../Components/Syscalls/SyscallDetail';\r\nimport SyscallList from '../Components/Syscalls/SyscallList';\r\n\r\nexport interface IReferenceStructure {\r\n    getListComponent: () => JSX.Element,\r\n    getItemComponent: (id: string) => JSX.Element | undefined,\r\n    friendlyName: string;\r\n    description: string;\r\n}\r\n\r\nexport let DataStructure: {\r\n    [key: string]: IReferenceStructure\r\n} = {\r\n    'instruction-types': {\r\n        description: 'MIPS architecture instruction types',\r\n        friendlyName: 'Instruction Types',\r\n        getItemComponent: (id: string) => {\r\n            const instructionType = instructionTypeSource.find(v => v.id === id);\r\n            return instructionType && React.createElement(InstructionTypeDetail, {item: instructionType});\r\n        },\r\n        getListComponent: () => React.createElement(InstructionTypeList, {items: instructionTypeSource})\r\n    },\r\n    'instructions': {\r\n        description: 'MIPS architecture instructions and QtSpim supported pseudoinstructions',\r\n        friendlyName: 'Instructions',\r\n        getItemComponent: (id: string) => {\r\n            const instruction = instructionSource.find(v => v.id === id);\r\n            return instruction && React.createElement(InstructionDetail, {item: instruction, type: instructionTypeFromEncoding(instruction.instructionEncoding)});\r\n        },\r\n        getListComponent: () => React.createElement(InstructionList, {items: instructionSource})\r\n    },\r\n    'syscalls': {\r\n        description: 'QtSpim supported syscalls for console IO, memory allocation, program termination, and other tasks',\r\n        friendlyName: 'Syscalls',\r\n        getItemComponent: (id: string) => {\r\n            const syscall = syscallSource.find(v => v.id === id);\r\n            return syscall && React.createElement(SyscallDetail, {item: syscall});\r\n        },\r\n        getListComponent: () => React.createElement(SyscallList, {items: syscallSource})\r\n    },\r\n    // tslint:disable-next-line:object-literal-sort-keys\r\n    'assembler-directives': {\r\n        description: 'QtSpim supported assembler directives for program structure, memory allocation, and more',\r\n        friendlyName: 'Assembler Directives',\r\n        getItemComponent: (id: string) => {\r\n            const assemblerDirective = assemblerDirectiveSource.find(v => v.id === id);\r\n            return assemblerDirective && React.createElement(AssemblerDirectiveDetail, {item: assemblerDirective});\r\n        },\r\n        getListComponent: () => React.createElement(AssemblerDirectiveList, {items: assemblerDirectiveSource})\r\n    },\r\n    'registers': {\r\n        description: 'MIPS registers for integers, floats, and system use',\r\n        friendlyName: 'Registers',\r\n        getItemComponent: (id: string) => {\r\n            const register = registerSource.find(v => v.id === id);\r\n            return register && React.createElement(RegisterDetail, {item: register});\r\n        },\r\n        getListComponent: () => React.createElement(RegisterList, {items: registerSource})\r\n    },\r\n    'guides': {\r\n        description: 'Other guides for MIPS programming with QtSpim',\r\n        friendlyName: 'Guides',\r\n        getItemComponent: (id: string) => {\r\n            const guide = guideSource.find(v => v.id === id);\r\n            return guide && React.createElement(GuideDetail, {item: guide});\r\n        },\r\n        getListComponent: () => React.createElement(GuideList, {items: guideSource})\r\n    }\r\n};","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Nav, NavItem, } from 'reactstrap';\r\nimport { DataStructure } from '../Data/DataStructure';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface INavBarProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface INavBarState {\r\n}\r\n\r\nclass NavBar extends React.Component<INavBarProps, INavBarState> {\r\n    public constructor(props: INavBarProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <Nav className=\"mb-2\">\r\n                    {Object.keys(DataStructure).map(k => (\r\n                        <NavItem key={k}>\r\n                            <NavLink className=\"nav-link\" activeClassName=\"nav-link link-uncolored\" to={`/${k}`}>{DataStructure[k].friendlyName}</NavLink>\r\n                        </NavItem>\r\n                    ))}\r\n                </Nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardBody, CardHeader, CardText, Col, Row } from 'reactstrap';\r\nimport { DataStructure } from '../Data/DataStructure';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IReferenceTypeListProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface IReferenceTypeListState {\r\n}\r\n\r\nclass ReferenceTypeList extends React.Component<IReferenceTypeListProps, IReferenceTypeListState> {\r\n    public constructor(props: IReferenceTypeListProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>Topics</h1>\r\n\r\n                <Row>\r\n                    {Object.keys(DataStructure).map(k => (\r\n                        <Col sm=\"6\" md=\"4\" lg=\"2\" key={k}>\r\n                            <Card className=\"mb-3\" key={k}>\r\n                                <CardHeader>\r\n                                    <Link className=\"link-unstyled\" to={`/${k}`}>\r\n                                        <img className=\"reference-type-icon\" src={process.env.PUBLIC_URL + '/icons/' + k + '.svg'} alt=\"\"/>\r\n                                    </Link>\r\n                                    <Link className=\"link-uncolored\" to={`/${k}`}>{DataStructure[k].friendlyName}</Link>\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <CardText><Link className=\"link-unstyled\" to={`/${k}`}>{DataStructure[k].description}</Link></CardText>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReferenceTypeList;\r\n","import * as React from 'react';\r\nimport { BrowserRouter as Router, NavLink, Route, RouteComponentProps, Switch } from 'react-router-dom';\r\nimport { Container } from 'reactstrap';\r\nimport './App.css';\r\n\r\nimport icon from './Media/processor-icon.svg'\r\n\r\nimport NavBar from './Components/NavBar';\r\nimport ReferenceTypeList from './Components/ReferenceTypeList';\r\nimport { DataStructure, IReferenceStructure } from './Data/DataStructure';\r\n\r\nclass App extends React.Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router basename={process.env.PUBLIC_URL || \"/\"}>\r\n                    <div>\r\n                        <Container className=\"bg-light mb-3\" fluid={true}>\r\n                            <div className=\"app-header py-3\">\r\n                                <NavLink className=\"link-unstyled\" to=\"/\">\r\n                                    <h1 className=\"display-3\"><img className=\"App-logo\" src={icon} alt=\"The site's logo, a drawing of a processor\" />MIPS Reference</h1>\r\n                                </NavLink>\r\n                                <p className=\"lead\">MIPS instructions, syscalls, registers, and more</p>\r\n\r\n                                <Switch>\r\n                                    <Route exact={true} path=\"/\" />\r\n                                    <Route path=\"/\" component={NavBar} />\r\n                                </Switch>\r\n                            </div>\r\n                        </Container>\r\n                        <Container fluid={true}>\r\n                            <Switch>\r\n                                <Route exact={true} path=\"/\" component={ReferenceTypeList} />\r\n                                {\r\n                                    Object.keys(DataStructure).map(k => (\r\n                                        <Route key={k} path={`/${k}`} render={this.getCategoryRenderer(DataStructure[k])} />\r\n                                    ))\r\n                                }\r\n                            </Switch>\r\n                        </Container>\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getCategoryRenderer(structure: IReferenceStructure) {\r\n        return (props: RouteComponentProps) => {\r\n            return (\r\n                <Switch>\r\n                    <Route path={`${props.match.path}/:id`} render={this.getItemRenderer(structure)} />\r\n                    <Route path={props.match.path} render={this.getListRenderer(structure)}/>\r\n                </Switch>\r\n            );\r\n        };\r\n    }\r\n\r\n    private getItemRenderer(structure: IReferenceStructure) {\r\n        return (props: RouteComponentProps<{id: string}>) => {\r\n            return structure.getItemComponent(props.match.params.id) || <p>Item {props.match.params.id} not found.</p>;\r\n        }\r\n    }\r\n\r\n    private getListRenderer(structure: IReferenceStructure) {\r\n        return (props: RouteComponentProps) => {\r\n            return structure.getListComponent();\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import * as ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}